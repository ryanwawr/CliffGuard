/* Generated By:JavaCC: Do not edit this line. CCJSqlParser.java */
/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package com.relationalcloud.tsqlparser.parser;

import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;

import com.relationalcloud.tsqlparser.expression.AllComparisonExpression;
import com.relationalcloud.tsqlparser.expression.AnyComparisonExpression;
import com.relationalcloud.tsqlparser.expression.BinaryExpression;
import com.relationalcloud.tsqlparser.expression.CaseExpression;
import com.relationalcloud.tsqlparser.expression.DateValue;
import com.relationalcloud.tsqlparser.expression.DoubleValue;
import com.relationalcloud.tsqlparser.expression.Expression;
import com.relationalcloud.tsqlparser.expression.Function;
import com.relationalcloud.tsqlparser.expression.InverseExpression;
import com.relationalcloud.tsqlparser.expression.JdbcParameter;
import com.relationalcloud.tsqlparser.expression.LongValue;
import com.relationalcloud.tsqlparser.expression.NullValue;
import com.relationalcloud.tsqlparser.expression.Parenthesis;
import com.relationalcloud.tsqlparser.expression.StringValue;
import com.relationalcloud.tsqlparser.expression.TimeValue;
import com.relationalcloud.tsqlparser.expression.TimestampValue;
import com.relationalcloud.tsqlparser.expression.WhenClause;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Addition;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Division;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Multiplication;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Subtraction;
import com.relationalcloud.tsqlparser.expression.operators.conditional.AndExpression;
import com.relationalcloud.tsqlparser.expression.operators.conditional.OrExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.Between;
import com.relationalcloud.tsqlparser.expression.operators.relational.EqualsTo;
import com.relationalcloud.tsqlparser.expression.operators.relational.ExistsExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.ExpressionList;
import com.relationalcloud.tsqlparser.expression.operators.relational.GreaterThan;
import com.relationalcloud.tsqlparser.expression.operators.relational.GreaterThanEquals;
import com.relationalcloud.tsqlparser.expression.operators.relational.InExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.IsNullExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.ItemsList;
import com.relationalcloud.tsqlparser.expression.operators.relational.LikeExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.Concatenation;
import com.relationalcloud.tsqlparser.expression.operators.relational.MinorThan;
import com.relationalcloud.tsqlparser.expression.operators.relational.MinorThanEquals;
import com.relationalcloud.tsqlparser.expression.operators.relational.NotEqualsTo;
import com.relationalcloud.tsqlparser.schema.ForeignKey;
import com.relationalcloud.tsqlparser.schema.Column;
import com.relationalcloud.tsqlparser.schema.Index;
import com.relationalcloud.tsqlparser.schema.ReferenceDefinition;
import com.relationalcloud.tsqlparser.schema.Table;
import com.relationalcloud.tsqlparser.schema.datatypes.*;
import com.relationalcloud.tsqlparser.statement.Statement;
import com.relationalcloud.tsqlparser.statement.alter.table.*;
import com.relationalcloud.tsqlparser.statement.create.index.CreateIndex;
import com.relationalcloud.tsqlparser.statement.create.table.ColumnDefinition;
import com.relationalcloud.tsqlparser.statement.create.table.CreateTable;
import com.relationalcloud.tsqlparser.statement.delete.Delete;
import com.relationalcloud.tsqlparser.statement.drop.*;
import com.relationalcloud.tsqlparser.statement.insert.Insert;
import com.relationalcloud.tsqlparser.statement.rename.RenameTable;
import com.relationalcloud.tsqlparser.statement.replace.Replace;
import com.relationalcloud.tsqlparser.statement.select.AllColumns;
import com.relationalcloud.tsqlparser.statement.select.AllTableColumns;
import com.relationalcloud.tsqlparser.statement.select.ColumnIndex;
import com.relationalcloud.tsqlparser.statement.select.ColumnReference;
import com.relationalcloud.tsqlparser.statement.select.Distinct;
import com.relationalcloud.tsqlparser.statement.select.FromItem;
import com.relationalcloud.tsqlparser.statement.select.Join;
import com.relationalcloud.tsqlparser.statement.select.Limit;
import com.relationalcloud.tsqlparser.statement.select.OrderByElement;
import com.relationalcloud.tsqlparser.statement.select.PlainSelect;
import com.relationalcloud.tsqlparser.statement.select.Select;
import com.relationalcloud.tsqlparser.statement.select.SelectBody;
import com.relationalcloud.tsqlparser.statement.select.SelectExpressionItem;
import com.relationalcloud.tsqlparser.statement.select.SelectItem;
import com.relationalcloud.tsqlparser.statement.select.SubJoin;
import com.relationalcloud.tsqlparser.statement.select.SubSelect;
import com.relationalcloud.tsqlparser.statement.select.Top;
import com.relationalcloud.tsqlparser.statement.select.Union;
import com.relationalcloud.tsqlparser.statement.select.WithItem;
import com.relationalcloud.tsqlparser.statement.truncate.Truncate;
import com.relationalcloud.tsqlparser.statement.update.Update;

/**
 * The parser generated by JavaCC
 */
public class CCJSqlParser implements CCJSqlParserConstants {

  final public Statement statement() throws ParseException {
  Statement stm;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WITH:
    case K_SELECT:
    case K_OPENPAR:
      stm = select();
      break;
    case K_UPDATE:
      stm = update();
      break;
    case K_INSERT:
      stm = insert();
      break;
    case K_DELETE:
      stm = deleteFromTable();
      break;
    case K_REPLACE:
      stm = replace();
      break;
    case K_CREATE:
      stm = createStatement();
      break;
    case K_DROP:
      stm = dropStatement();
      break;
    case K_TRUNCATE:
      stm = truncate();
      break;
    case K_ALTER:
      stm = alterTable();
      break;
    case K_RENAME:
      stm = renameStatement();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 208:
      jj_consume_token(208);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(0);
      {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

  final public Statement createStatement() throws ParseException {
        Statement stmt;
    jj_consume_token(K_CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TABLE:
    case K_GLOBAL:
    case K_LOCAL:
    case K_TEMPORARY:
    case K_TEMP:
      stmt = createTable();
      break;
    case K_INDEX:
    case K_UNIQUE:
    case K_SPATIAL:
    case K_FULLTEXT:
    case K_ONLINE:
    case K_OFFLINE:
      stmt = createIndex();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStatement alterTable() throws ParseException {
        AlterTableStatement stmt;
        Table table;
        String tableOptions=null;
    jj_consume_token(K_ALTER);
    jj_consume_token(K_TABLE);
    table = table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UNION:
    case K_INDEX:
    case K_COMMENT:
    case K_DEFAULT:
    case K_TABLESPACE:
    case K_KEY_BLOCK_SIZE:
    case K_AUTO_INCREMENT:
    case K_ENGINE:
    case K_AVG_ROW_LENGTH:
    case K_CHECKSUM:
    case K_CONNECTION:
    case K_DATA:
    case K_DELAY_KEY_WRITE:
    case K_INSERT_METHOD:
    case K_MAX_ROWS:
    case K_MIN_ROWS:
    case K_PACK_KEYS:
    case K_PASSWORD:
    case K_ROW_FORMAT:
    case K_TYPE:
    case K_CHARSET:
    case K_CHARACTER:
    case K_COLLATE:
      tableOptions = tableOption();
                stmt = new AlterTableStatement();
                stmt.setTableOptions(tableOptions);
      break;
    case K_ADD:
      stmt = addStatement();
      break;
    case K_ALTER:
    case K_MODIFY:
    case K_CHANGE:
      stmt = alterColumnStatement();
      break;
    case K_DROP:
      stmt = alterTableDropStatement();
      break;
    case K_RENAME:
      stmt = alterTableRenameTableStatement();
      break;
    case K_ORDER:
      stmt = orderByStatement();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                stmt.setTable(table);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStatement orderByStatement() throws ParseException {
        AlterTableOrderByStatement stmt = new AlterTableOrderByStatement();
        List orderByElements;
    orderByElements = orderByElements();
                stmt.setOrderByElements(orderByElements);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStatement alterTableRenameTableStatement() throws ParseException {
        Table newTable;
        AlterTableRenameTableStatement stmt = new AlterTableRenameTableStatement();
    jj_consume_token(K_RENAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TO:
      jj_consume_token(K_TO);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    newTable = table();
                stmt.setNewTable(newTable);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStatement alterColumnStatement() throws ParseException {
        Column column=null;
        Column columnOld=null;
        Column columnPosition=null;
        ColumnDefinition columnDefinition=null;
        Token tk=null;
        Token defaultToken = null;
        String option=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALTER:
      jj_consume_token(K_ALTER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLUMN:
        jj_consume_token(K_COLUMN);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
         AlterTableAlterColumnStatement stmtAlter = new AlterTableAlterColumnStatement();
      column = column();
                stmtAlter.setColumn(column);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SET:
        jj_consume_token(K_SET);
        jj_consume_token(K_DEFAULT);
        defaultToken = jj_consume_token(S_IDENTIFIER);
                        stmtAlter.setNewDefault(true);
                        stmtAlter.setDefaultValue(defaultToken.image);
        break;
      case K_DROP:
        jj_consume_token(K_DROP);
        jj_consume_token(K_DEFAULT);
                        stmtAlter.setDropDefault(true);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return stmtAlter;}
      break;
    case K_CHANGE:
      jj_consume_token(K_CHANGE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLUMN:
        jj_consume_token(K_COLUMN);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                AlterTableChangeColumnStatement stmtChange = new AlterTableChangeColumnStatement();
      columnOld = column();
      column = column();
      columnDefinition = columnDefinition();
                columnDefinition.setColumnName(column);
                stmtChange.setColumnOld(columnOld);
                stmtChange.setNewColumnDefinition(columnDefinition);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FIRST:
      case K_AFTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FIRST:
          tk = jj_consume_token(K_FIRST);
          break;
        case K_AFTER:
          tk = jj_consume_token(K_AFTER);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        columnPosition = column();
                stmtChange.setColumnPosition(tk.image);
                stmtChange.setColumnPositionName(columnPosition);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
         {if (true) return stmtChange;}
      break;
    case K_MODIFY:
      jj_consume_token(K_MODIFY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLUMN:
        jj_consume_token(K_COLUMN);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                AlterTableModifyColumnStatement stmtModify = new AlterTableModifyColumnStatement();
      column = column();
      columnDefinition = columnDefinition();
                columnDefinition.setColumnName(column);
                stmtModify.setColDef(columnDefinition);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FIRST:
      case K_AFTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FIRST:
          tk = jj_consume_token(K_FIRST);
          break;
        case K_AFTER:
          tk = jj_consume_token(K_AFTER);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        columnPosition = column();
                        columnDefinition.setColumnName(column);
                        stmtModify.setColumnPosition(tk.image);
                        stmtModify.setColumnPositionName(columnPosition);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
         {if (true) return stmtModify;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ColumnDefinition columnDefinition() throws ParseException {
        DataType colDataType=null;
        ColumnDefinition colDef=null;
        Token columnName=null;
        String parameter=null;
        List columnSpecs = new ArrayList();
    colDataType = colDataType();
    columnSpecs = columnOption();
                colDef = new ColumnDefinition();
                colDef.setColDataType(colDataType);
                colDef.setColumnSpecStrings(columnSpecs);
                {if (true) return colDef;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStatement addStatement() throws ParseException {
        AlterTableStatement stmt;
    jj_consume_token(K_ADD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_COLUMN:
    case K_OPENPAR:
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      stmt = addColumnStatement();
      break;
    case K_KEY:
    case K_INDEX:
    case K_UNIQUE:
    case K_PRIMARY:
    case K_SPATIAL:
    case K_FOREIGN:
    case K_FULLTEXT:
    case K_CONSTRAINT:
      stmt = addConstraintStatement();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableAddConstraintStatement addConstraintStatement() throws ParseException {
        AlterTableAddConstraintStatement stmt = null;
        Index index;
    index = indexDefinition();
        stmt = new AlterTableAddConstraintStatement();
        stmt.setIndex(index);
        {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableAddColumnStatement addColumnStatement() throws ParseException {
        AlterTableAddColumnStatement stmt = new AlterTableAddColumnStatement();
        List columnSpecs = null;
        Token columnName= null;
        DataType colDataType= null;
        ColumnDefinition columnDefinition=null;
        Column column=null;
        ArrayList columnDefinitions = new ArrayList();
        String parameter;
        Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_COLUMN:
      jj_consume_token(K_COLUMN);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      column = column();
      columnDefinition = columnDefinition();
                        columnDefinition.setColumnName(column);
                        columnDefinitions.add(columnDefinition);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FIRST:
      case K_AFTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_FIRST:
          tk = jj_consume_token(K_FIRST);
          break;
        case K_AFTER:
          tk = jj_consume_token(K_AFTER);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        column = column();
                        stmt.setPosition(tk.image);
                        stmt.setColumnPosition(column);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    case K_OPENPAR:
      jj_consume_token(K_OPENPAR);
      column = column();
      columnDefinition = columnDefinition();
                columnDefinition.setColumnName(column);
                columnDefinitions.add(columnDefinition);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_1;
        }
        jj_consume_token(K_COMMA);
        column = column();
        columnDefinition = columnDefinition();
                        columnDefinition.setColumnName(column);
                        columnDefinitions.add(columnDefinition);
      }
      jj_consume_token(K_CLOSEPAR);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                stmt.setColumnDefinitions(columnDefinitions.size()>0?columnDefinitions:null);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public AlterTableStatement alterTableDropStatement() throws ParseException {
        //Token name=null;
        String name=null;
        Token tk1=null;
        Token tk2=null;
        Column column;
    jj_consume_token(K_DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_COLUMN:
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLUMN:
        jj_consume_token(K_COLUMN);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      column = column();
                AlterTableDropColumnStatement stmt1 = new AlterTableDropColumnStatement();
                stmt1.setColumn(column);
                {if (true) return stmt1;}
      break;
    case K_KEY:
    case K_INDEX:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INDEX:
        tk1 = jj_consume_token(K_INDEX);
        break;
      case K_KEY:
        tk1 = jj_consume_token(K_KEY);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = relObjectName();
                AlterTableDropConstraintStatement stmt2 = new AlterTableDropConstraintStatement();
                stmt2.setConstraintName(name);
                stmt2.setConstraintType(tk1.image);
                {if (true) return stmt2;}
      break;
    case K_FOREIGN:
      tk1 = jj_consume_token(K_FOREIGN);
      tk2 = jj_consume_token(K_KEY);
      name = relObjectName();
                AlterTableDropConstraintStatement stmt3 = new AlterTableDropConstraintStatement();
                stmt3.setConstraintName(name);
                stmt3.setConstraintType(tk1.image + " " + tk2.image);
                {if (true) return stmt3;}
      break;
    case K_PRIMARY:
      tk1 = jj_consume_token(K_PRIMARY);
      tk2 = jj_consume_token(K_KEY);
                AlterTableDropConstraintStatement stmt4 = new AlterTableDropConstraintStatement();
                stmt4.setConstraintType(tk1.image + " " + tk2.image);
                {if (true) return stmt4;}
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Update update() throws ParseException {
        Update update = new Update();
        Table table = null;
        List tables=null;
        Expression where = null;
        Column tableColumn = null;
        List expList = new ArrayList();
        List columns = new ArrayList();
        Expression value = null;
         tables = new ArrayList();
    jj_consume_token(K_UPDATE);
    table = table();
                              tables.add(table);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_2;
      }
      jj_consume_token(K_COMMA);
      table = table();
                                                                            tables.add(table);
    }
    jj_consume_token(K_SET);
    tableColumn = column();
    jj_consume_token(K_EQUALS);
    value = simpleExpression();
                                                                columns.add(tableColumn); expList.add(value);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_3;
      }
      jj_consume_token(K_COMMA);
      tableColumn = column();
      jj_consume_token(K_EQUALS);
      value = simpleExpression();
                                                                            columns.add(tableColumn); expList.add(value);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = whereClause();
                           update.setWhere(where);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LIMIT:
    case K_OFFSET:
      limit();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                update.setColumns(columns);
                update.setExpressions(expList);
                update.setTables(tables);
                {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

  final public Replace replace() throws ParseException {
        Replace replace = new Replace();
        Table table = null;
        Column tableColumn = null;
        Expression value = null;

        List columns = new ArrayList();
        List expList = new ArrayList();
        ItemsList itemsList = null;
        Expression exp = null;
    jj_consume_token(K_REPLACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      jj_consume_token(K_INTO);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    table = table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SET:
      jj_consume_token(K_SET);
      tableColumn = column();
      jj_consume_token(K_EQUALS);
      value = simpleExpression();
                                                                                columns.add(tableColumn); expList.add(value);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_4;
        }
        jj_consume_token(K_COMMA);
        tableColumn = column();
        jj_consume_token(K_EQUALS);
        value = simpleExpression();
                                                                                   columns.add(tableColumn); expList.add(value);
      }
                                replace.setExpressions(expList);
      break;
    case K_SELECT:
    case K_VALUES:
    case K_OPENPAR:
      if (jj_2_1(2)) {
        jj_consume_token(K_OPENPAR);
        tableColumn = column();
                                                              columns.add(tableColumn);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_COMMA:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_5;
          }
          jj_consume_token(K_COMMA);
          tableColumn = column();
                                                                                                                      columns.add(tableColumn);
        }
        jj_consume_token(K_CLOSEPAR);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_VALUES:
        jj_consume_token(K_VALUES);
        jj_consume_token(K_OPENPAR);
        exp = primaryExpression();
                                                                          expList.add(exp);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_COMMA:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_6;
          }
          jj_consume_token(K_COMMA);
          exp = primaryExpression();
                                                                                expList.add(exp);
        }
        jj_consume_token(K_CLOSEPAR);
                                                                                                             itemsList = new ExpressionList(expList);
        break;
      case K_SELECT:
      case K_OPENPAR:
                                          replace.setUseValues(false);
        itemsList = subSelect();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                replace.setItemsList(itemsList);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (columns.size() > 0)
                        replace.setColumns(columns);
                replace.setTable(table);
                {if (true) return replace;}
    throw new Error("Missing return statement in function");
  }

  final public Insert insert() throws ParseException {
        Insert insert = new Insert();
        Table table = null;
        Column tableColumn = null;
        List columns = new ArrayList();
        List primaryExpList = new ArrayList();
        ItemsList itemsList = null;
        Expression exp = null;
    jj_consume_token(K_INSERT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IGNORE:
      jj_consume_token(K_IGNORE);
                            insert.setIgnore(true);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      jj_consume_token(K_INTO);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    table = table();
    if (jj_2_2(2)) {
      jj_consume_token(K_OPENPAR);
      tableColumn = column();
                                              columns.add(tableColumn);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_7;
        }
        jj_consume_token(K_COMMA);
        tableColumn = column();
                                                                                                      columns.add(tableColumn);
      }
      jj_consume_token(K_CLOSEPAR);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_VALUES:
      jj_consume_token(K_VALUES);
      jj_consume_token(K_OPENPAR);
      exp = simpleExpression();
                                                         primaryExpList.add(exp);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_8;
        }
        jj_consume_token(K_COMMA);
        exp = simpleExpression();
                                                               primaryExpList.add(exp);
      }
      jj_consume_token(K_CLOSEPAR);
                                                                                                   itemsList = new ExpressionList(primaryExpList);
      break;
    case K_SELECT:
    case K_OPENPAR:
      if (jj_2_3(2)) {
        jj_consume_token(K_OPENPAR);
      } else {
        ;
      }
                          insert.setUseValues(false);
      itemsList = subSelect();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CLOSEPAR:
        jj_consume_token(K_CLOSEPAR);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                insert.setItemsList(itemsList);
            insert.setTable(table);
            if (columns.size() > 0)
                insert.setColumns(columns);
        {if (true) return insert;}
    throw new Error("Missing return statement in function");
  }

  final public Delete deleteFromTable() throws ParseException {
        Delete delete = new Delete();
        Table table = null;
        Expression where = null;
        List tables = new ArrayList();
        List orderByElements;
        Token rowCount=null;
    jj_consume_token(K_DELETE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LOW_PRIORITY:
      jj_consume_token(K_LOW_PRIORITY);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_QUICK:
      jj_consume_token(K_QUICK);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IGNORE:
      jj_consume_token(K_IGNORE);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      table();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_9;
        }
        jj_consume_token(K_COMMA);
        table();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    jj_consume_token(K_FROM);
    table = table();
                                                                                                                  tables.add(table);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_10;
      }
      jj_consume_token(K_COMMA);
      table = table();
                                                                                                                                                                tables.add(table);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = whereClause();
                           delete.setWhere(where);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
        delete.setTables(tables);
        {if (true) return delete;}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      orderByElements = orderByElements();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LIMIT:
      jj_consume_token(K_LIMIT);
      rowCount = jj_consume_token(S_INTEGER);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

  final public Column column() throws ParseException {
        String name1 = null;
        String name2 = null;
        String name3 = null;
    // [schema.][tabella.]colonna
        name1 = relObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 209:
      jj_consume_token(209);
      name2 = relObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 209:
        jj_consume_token(209);
        name3 = relObjectName();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
        String colName = null;
        Table table = null;
        if (name3 != null) {
                table = new Table(name1, name2);
                colName = name3;
        } else if (name2 != null) {
                table = new Table(null, name1);
                colName = name2;
        } else {
                table = new Table(null, null);
                colName = name1;
        }

        {if (true) return new Column(table, colName);}
    throw new Error("Missing return statement in function");
  }

  final public String relObjectName() throws ParseException {
        Token tk = null;
        String str;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      tk = jj_consume_token(S_IDENTIFIER);
      break;
    case S_OBJECT_NAME:
      tk = jj_consume_token(S_OBJECT_NAME);
      break;
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
      str = nonReservedKeyword();
          {if (true) return str;}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return tk.image;}
    throw new Error("Missing return statement in function");
  }

  final public String nonReservedKeyword() throws ParseException {
        Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DATETIME:
      tk = jj_consume_token(K_DATETIME);
      break;
    case K_CHECKSUM:
      tk = jj_consume_token(K_CHECKSUM);
      break;
    case K_TYPE:
      tk = jj_consume_token(K_TYPE);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return tk.image;}
    throw new Error("Missing return statement in function");
  }

/*
NEVER USED
Table TableWithAlias():
{
	Table table = null;
	String alias = null;
}
{
	table=Table() [alias=Alias() { table.setAlias(alias); }]
	{ return table; }
}*/
  final public Table table() throws ParseException {
        Table table = null;
        String name1 = null;
        String name2 = null;
        Token alias=null;
        TimestampDataType timestamp1 = null;
        TimestampDataType timestamp2 = null;
        Token symmetry=null;
    if (jj_2_4(3)) {
      name1 = relObjectName();
      jj_consume_token(209);
      name2 = relObjectName();
                                                                  table = new Table(name1, name2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATETIME:
      case S_IDENTIFIER:
      case S_OBJECT_NAME:
        name1 = relObjectName();
                                        table = new Table(null, name1);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_5(2)) {
      jj_consume_token(K_AS);
      jj_consume_token(K_OF);
      jj_consume_token(K_SYSTEM);
      jj_consume_token(K_TIME);
      timestamp1 = timestampType();
                                                                                    table.setTimestamp1(timestamp1); table.setAsOf(true); table.setTemporal(true);
    } else {
      ;
    }
    if (jj_2_6(2)) {
      jj_consume_token(K_VERSIONS);
      jj_consume_token(K_BETWEEN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASYMMETRIC:
      case K_SYMMETRIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASYMMETRIC:
          symmetry = jj_consume_token(K_ASYMMETRIC);
                                                                          table.setSymmetric(true);
          break;
        case K_SYMMETRIC:
          symmetry = jj_consume_token(K_SYMMETRIC);
                                                                                                                              table.setSymmetric(false); table.setTemporal(true);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(K_SYSTEM);
      jj_consume_token(K_TIME);
      timestamp1 = timestampType();
                                                                                                                                                                                                                                     table.setTimestamp1(timestamp1); table.setBetween(true);
      jj_consume_token(K_AND);
      jj_consume_token(K_SYSTEM);
      jj_consume_token(K_TIME);
      timestamp2 = timestampType();
                                                                                                                                                                                                                                                                                                                                                       table.setTimestamp2(timestamp2);
    } else {
      ;
    }
    if (jj_2_7(2)) {
      jj_consume_token(K_VERSIONS);
      jj_consume_token(K_AFTER);
      jj_consume_token(K_SYSTEM);
      jj_consume_token(K_TIME);
      timestamp1 = timestampType();
                                                                                             table.setTimestamp1(timestamp1); table.setAfter(true); table.setTemporal(true);
    } else {
      ;
    }
    if (jj_2_8(2)) {
      jj_consume_token(K_VERSIONS);
      jj_consume_token(K_BEFORE);
      jj_consume_token(K_SYSTEM);
      jj_consume_token(K_TIME);
      timestamp1 = timestampType();
                                                                                              table.setTimestamp1(timestamp1); table.setBefore(true); table.setTemporal(true);
    } else {
      ;
    }
    if (jj_2_9(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      alias = jj_consume_token(S_IDENTIFIER);
                                                     table.setAlias(alias.image); table.setTemporal(true);
    } else {
      ;
    }
                {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  final public Select select() throws ParseException {
        Select select = new Select();
        SelectBody selectBody = null;
        List with = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WITH:
      with = withList();
                            select.setWithItemsList(with);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    selectBody = selectBody();
                select.setSelectBody(selectBody);
                {if (true) return select;}
    throw new Error("Missing return statement in function");
  }

  final public SelectBody selectBody() throws ParseException {
  SelectBody selectBody = null;
    if (jj_2_10(2147483647)) {
      selectBody = union();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        selectBody = plainSelect();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return selectBody;}
    throw new Error("Missing return statement in function");
  }

  final public PlainSelect plainSelect() throws ParseException {
        PlainSelect plainSelect = new PlainSelect();
        List selectItems = null;
        FromItem fromItem = null;
        List joins = null;
        List distinctOn = null;
        Expression where = null;
        List orderByElements;
        List groupByColumnReferences = null;
        Expression having = null;
        Limit limit = null;
        Top top = null;
        boolean isforupdate = false;
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
                                       Distinct distinct = new Distinct(); plainSelect.setDistinct(distinct);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ON:
          jj_consume_token(K_ON);
          jj_consume_token(K_OPENPAR);
          distinctOn = selectItemsList();
                                                                           plainSelect.getDistinct().setOnSelectItems(distinctOn);
          jj_consume_token(K_CLOSEPAR);
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TOP:
      top = top();
                      plainSelect.setTop(top);
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    selectItems = selectItemsList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      intoClause();
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    jj_consume_token(K_FROM);
    fromItem = fromItem();
    joins = joinsList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = whereClause();
                            plainSelect.setWhere(where);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      groupByColumnReferences = groupByColumnReferences();
                                                          plainSelect.setGroupByColumnReferences(groupByColumnReferences);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      having = having();
                        plainSelect.setHaving(having);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      orderByElements = orderByElements();
                                                                         plainSelect.setOrderByElements(orderByElements);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LIMIT:
    case K_OFFSET:
      limit = limit();
                          plainSelect.setLimit(limit);
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FOR:
      jj_consume_token(K_FOR);
      jj_consume_token(K_UPDATE);
                               plainSelect.setIsForupdate(true);
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
                plainSelect.setSelectItems(selectItems);
                plainSelect.setFromItem(fromItem);
                if (joins.size() > 0)
                        plainSelect.setJoins(joins);
                {if (true) return plainSelect;}
    throw new Error("Missing return statement in function");
  }

  final public Union union() throws ParseException {
        Union union = new Union();
        List orderByElements = null;
        Limit limit = null;
        PlainSelect select = null;
        ArrayList selects = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OPENPAR:
      jj_consume_token(K_OPENPAR);
      select = plainSelect();
                                                  selects.add(select);
      jj_consume_token(K_CLOSEPAR);
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                                      union.setAll(true);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
                                                                                                  union.setDistinct(true);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      jj_consume_token(K_OPENPAR);
      select = plainSelect();
                                                  selects.add(select);
      jj_consume_token(K_CLOSEPAR);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UNION:
          ;
          break;
        default:
          jj_la1[71] = jj_gen;
          break label_11;
        }
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
            break;
          case K_DISTINCT:
            jj_consume_token(K_DISTINCT);
            break;
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[73] = jj_gen;
          ;
        }
        jj_consume_token(K_OPENPAR);
        select = plainSelect();
                                                                                               selects.add(select);
        jj_consume_token(K_CLOSEPAR);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        orderByElements = orderByElements();
                                                            union.setOrderByElements(orderByElements);
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LIMIT:
      case K_OFFSET:
        limit = limit();
                                        union.setLimit(limit);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      break;
    case K_SELECT:
      select = plainSelect();
                                              selects.add(select);
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                                      union.setAll(true);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
                                                                                                  union.setDistinct(true);
          break;
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      select = plainSelect();
                                              selects.add(select);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UNION:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_12;
        }
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
            break;
          case K_DISTINCT:
            jj_consume_token(K_DISTINCT);
            break;
          default:
            jj_la1[79] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[80] = jj_gen;
          ;
        }
        select = plainSelect();
                                                                                           selects.add(select);
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                union.setPlainSelects(selects);
                {if (true) return union;}
    throw new Error("Missing return statement in function");
  }

  final public List withList() throws ParseException {
        ArrayList withItemsList = new ArrayList();
        WithItem with = null;
    jj_consume_token(K_WITH);
    with = withItem();
                                   withItemsList.add(with);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[82] = jj_gen;
        break label_13;
      }
      jj_consume_token(K_COMMA);
      with = withItem();
                                                                                     withItemsList.add(with);
    }
          {if (true) return withItemsList;}
    throw new Error("Missing return statement in function");
  }

  final public WithItem withItem() throws ParseException {
        WithItem with = new WithItem();
        String name = null;
        List selectItems = null;
        SelectBody selectBody = null;
    name = relObjectName();
                                with.setName(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OPENPAR:
      jj_consume_token(K_OPENPAR);
      selectItems = selectItemsList();
      jj_consume_token(K_CLOSEPAR);
                                                   with.setWithItemList(selectItems);
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(K_AS);
    jj_consume_token(K_OPENPAR);
    selectBody = selectBody();
                                         with.setSelectBody(selectBody);
    jj_consume_token(K_CLOSEPAR);
           {if (true) return with;}
    throw new Error("Missing return statement in function");
  }

  final public List selectItemsList() throws ParseException {
        ArrayList selectItemsList = new ArrayList();
        SelectItem selectItem = null;
    selectItem = selectItem();
                              selectItemsList.add(selectItem);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_14;
      }
      jj_consume_token(K_COMMA);
      selectItem = selectItem();
                                                                                                selectItemsList.add(selectItem);
    }
      {if (true) return selectItemsList;}
    throw new Error("Missing return statement in function");
  }

  final public SelectItem selectItem() throws ParseException {
        Function function = null;
        AllColumns allTableColumns = null;
        Column tableColumn = null;
        String alias = null;
        SelectItem selectItem = null;
        SelectExpressionItem selectExpressionItem = null;
        Expression expression = null;
        SubSelect subSelect = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 210:
      jj_consume_token(210);
           selectItem = new AllColumns();
      break;
    default:
      jj_la1[86] = jj_gen;
      if (jj_2_11(2147483647)) {
        selectItem = allTableColumns();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_REPLACE:
        case K_OPENPAR:
        case K_CHECKSUM:
        case K_TYPE:
        case K_DATE:
        case K_DATETIME:
        case K_TIMESTAMP:
        case K_TIME:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_OBJECT_NAME:
        case 211:
        case 218:
        case 219:
        case 221:
        case 223:
        case 224:
        case 225:
          expression = simpleExpression();
                                        selectExpressionItem = new SelectExpressionItem(); selectExpressionItem.setExpression(expression);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AS:
          case K_CHECKSUM:
          case K_TYPE:
          case K_DATETIME:
          case S_IDENTIFIER:
          case S_OBJECT_NAME:
            alias = alias();
                         selectExpressionItem.setAlias(alias);
            break;
          default:
            jj_la1[85] = jj_gen;
            ;
          }
                                                                    selectItem = selectExpressionItem;
          break;
        default:
          jj_la1[87] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                {if (true) return selectItem;}
    throw new Error("Missing return statement in function");
  }

  final public AllTableColumns allTableColumns() throws ParseException {
        Table table = null;
    table = table();
    jj_consume_token(209);
    jj_consume_token(210);
                {if (true) return new AllTableColumns(table);}
    throw new Error("Missing return statement in function");
  }

  final public String alias() throws ParseException {
  String retval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    retval = relObjectName();
     {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public void intoClause() throws ParseException {
    jj_consume_token(K_INTO);
    table();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[89] = jj_gen;
        break label_15;
      }
      jj_consume_token(K_COMMA);
      table();
    }
  }

  final public FromItem fromItem() throws ParseException {
        FromItem fromItem = null;
        String alias = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OPENPAR:
      jj_consume_token(K_OPENPAR);
      if (jj_2_12(2147483647)) {
        fromItem = subJoin();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_SELECT:
        case K_OPENPAR:
          fromItem = subSelect();
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(K_CLOSEPAR);
      break;
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      fromItem = table();
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      alias = alias();
                         fromItem.setAlias(alias);
      break;
    default:
      jj_la1[92] = jj_gen;
      ;
    }
                {if (true) return fromItem;}
    throw new Error("Missing return statement in function");
  }

  final public FromItem subJoin() throws ParseException {
        FromItem fromItem = null;
        Join join = null;
        SubJoin subJoin = new SubJoin();
    fromItem = fromItem();
                              subJoin.setLeft(fromItem);
    join = joinerExpression();
                                  subJoin.setJoin(join);
                {if (true) return subJoin;}
    throw new Error("Missing return statement in function");
  }

  final public List joinsList() throws ParseException {
        ArrayList joinsList = new ArrayList();
        Join join = null;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_JOIN:
      case K_LEFT:
      case K_FULL:
      case K_INNER:
      case K_OUTER:
      case K_RIGHT:
      case K_NATURAL:
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[93] = jj_gen;
        break label_16;
      }
      join = joinerExpression();
                               joinsList.add(join);
    }
      {if (true) return joinsList;}
    throw new Error("Missing return statement in function");
  }

  final public Join joinerExpression() throws ParseException {
        Join join = new Join();
        FromItem right = null;
        Expression onExpression = null;
        Column tableColumn;
        List columns = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LEFT:
    case K_FULL:
    case K_RIGHT:
    case K_NATURAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LEFT:
        jj_consume_token(K_LEFT);
                           join.setLeft(true);
        break;
      case K_RIGHT:
        jj_consume_token(K_RIGHT);
                              join.setRight(true);
        break;
      case K_FULL:
        jj_consume_token(K_FULL);
                             join.setFull(true);
        break;
      case K_NATURAL:
        jj_consume_token(K_NATURAL);
                                join.setNatural(true);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INNER:
    case K_OUTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUTER:
        jj_consume_token(K_OUTER);
                            join.setOuter(true);
        break;
      case K_INNER:
        jj_consume_token(K_INNER);
                              join.setInner(true);
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_JOIN:
      jj_consume_token(K_JOIN);
      break;
    case K_COMMA:
      jj_consume_token(K_COMMA);
                               join.setSimple(true);
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = fromItem();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
    case K_USING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ON:
        jj_consume_token(K_ON);
        onExpression = expression();
                                                      join.setOnExpression(onExpression);
        break;
      case K_USING:
        jj_consume_token(K_USING);
        jj_consume_token(K_OPENPAR);
        tableColumn = column();
                                                       columns = new ArrayList(); columns.add(tableColumn);
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_COMMA:
            ;
            break;
          default:
            jj_la1[99] = jj_gen;
            break label_17;
          }
          jj_consume_token(K_COMMA);
          tableColumn = column();
                                                            columns.add(tableColumn);
        }
        jj_consume_token(K_CLOSEPAR);
                    join.setUsingColumns(columns);
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
        join.setRightItem(right);
    {if (true) return join;}
    throw new Error("Missing return statement in function");
  }

  final public Expression whereClause() throws ParseException {
        Expression retval = null;
    jj_consume_token(K_WHERE);
    retval = expression();
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public List groupByColumnReferences() throws ParseException {
        ColumnReference columnReference = null;
        List columnReferences = new ArrayList();
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    columnReference = columnReference();
                                                        columnReferences.add(columnReference);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_18;
      }
      jj_consume_token(K_COMMA);
      columnReference = columnReference();
                                             columnReferences.add(columnReference);
    }
                {if (true) return columnReferences;}
    throw new Error("Missing return statement in function");
  }

  final public Expression having() throws ParseException {
        Expression having = null;
    jj_consume_token(K_HAVING);
    having = expression();
                {if (true) return having;}
    throw new Error("Missing return statement in function");
  }

  final public List orderByElements() throws ParseException {
        List orderByList = new ArrayList();
        OrderByElement orderByElement = null;
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    orderByElement = orderByElement();
                                                       orderByList.add(orderByElement);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_19;
      }
      jj_consume_token(K_COMMA);
      orderByElement = orderByElement();
                                               orderByList.add(orderByElement);
    }
        {if (true) return orderByList;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByElement orderByElement() throws ParseException {
        OrderByElement orderByElement = new OrderByElement();
        List retval = new ArrayList();
        ColumnReference columnReference = null;
    columnReference = columnReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
                           orderByElement.setAsc(false);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
        orderByElement.setColumnReference(columnReference);
                {if (true) return orderByElement;}
    throw new Error("Missing return statement in function");
  }

  final public Limit limit() throws ParseException {
        Limit limit = new Limit();
        Token token = null;
    if (jj_2_13(3)) {
      jj_consume_token(K_LIMIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        token = jj_consume_token(S_INTEGER);
                                                                    limit.setOffset(Long.parseLong(token.image));
        break;
      case 211:
        jj_consume_token(211);
                                                      limit.setOffsetJdbcParameter(true);
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        token = jj_consume_token(S_INTEGER);
                                                    limit.setRowCount(Long.parseLong(token.image));
        break;
      case 211:
        jj_consume_token(211);
                                                                                                              limit.setRowCountJdbcParameter(true);
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OFFSET:
        jj_consume_token(K_OFFSET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          token = jj_consume_token(S_INTEGER);
                                                      limit.setOffset(Long.parseLong(token.image));
          break;
        case 211:
          jj_consume_token(211);
                                                                                                              limit.setOffsetJdbcParameter(true);
          break;
        default:
          jj_la1[108] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case K_LIMIT:
        jj_consume_token(K_LIMIT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          token = jj_consume_token(S_INTEGER);
                                                            limit.setRowCount(Long.parseLong(token.image));
          break;
        case 211:
          jj_consume_token(211);
                                              limit.setRowCountJdbcParameter(true);
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
                                                  limit.setLimitAll(true);
          break;
        default:
          jj_la1[109] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OFFSET:
          jj_consume_token(K_OFFSET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_INTEGER:
            token = jj_consume_token(S_INTEGER);
                                                              limit.setOffset(Long.parseLong(token.image));
            break;
          case 211:
            jj_consume_token(211);
                                                                                                                      limit.setOffsetJdbcParameter(true);
            break;
          default:
            jj_la1[110] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[111] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return limit;}
    throw new Error("Missing return statement in function");
  }

  final public Top top() throws ParseException {
        Top top = new Top();
        Token token = null;
    jj_consume_token(K_TOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_INTEGER:
      token = jj_consume_token(S_INTEGER);
                                    top.setRowCount(Long.parseLong(token.image));
      break;
    case 211:
      jj_consume_token(211);
                      top.setRowCountJdbcParameter(true);
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return top;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnReference columnReference() throws ParseException {
        ColumnReference retval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      retval = column();
      break;
    case S_INTEGER:
      retval = columnIndex();
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public ColumnIndex columnIndex() throws ParseException {
        ColumnIndex retval = new ColumnIndex();
        Token index = null;
    index = jj_consume_token(S_INTEGER);
                retval.setIndex(Integer.parseInt(index.image));
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {
        Expression retval = null;
    if (jj_2_14(2147483647)) {
      retval = orExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OPENPAR:
        jj_consume_token(K_OPENPAR);
        retval = expression();
        jj_consume_token(K_CLOSEPAR);
                                             retval = new Parenthesis(retval);
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression orExpression() throws ParseException {
        Expression left, right, result;
    left = andExpression();
                               result = left;
    label_20:
    while (true) {
      if (jj_2_15(2147483647)) {
        ;
      } else {
        break label_20;
      }
      jj_consume_token(K_OR);
      right = andExpression();
                                result = new OrExpression(left, right);
                                left = result;
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression andExpression() throws ParseException {
        Expression left, right, result;
        boolean not = false;
    if (jj_2_16(2147483647)) {
      left = condition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_OPENPAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
                        not = true;
          break;
        default:
          jj_la1[116] = jj_gen;
          ;
        }
        jj_consume_token(K_OPENPAR);
        left = orExpression();
        jj_consume_token(K_CLOSEPAR);
                                         left = new Parenthesis(left); if (not) { ((Parenthesis)left).setNot(); not = false; }
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          result = left;
    label_21:
    while (true) {
      if (jj_2_17(2147483647)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(K_AND);
      if (jj_2_18(2147483647)) {
        right = condition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
        case K_OPENPAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
                                not = true;
            break;
          default:
            jj_la1[118] = jj_gen;
            ;
          }
          jj_consume_token(K_OPENPAR);
          right = orExpression();
          jj_consume_token(K_CLOSEPAR);
                                                  right = new Parenthesis(right); if (not) { ((Parenthesis)right).setNot(); not = false; }
          break;
        default:
          jj_la1[119] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                        result = new AndExpression(left, right);
                        left = result;
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression condition() throws ParseException {
        Expression result;
    if (jj_2_19(2147483647)) {
      result = sqlCondition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
      case K_NOT:
      case K_NULL:
      case K_CASE:
      case K_SOME:
      case K_REPLACE:
      case K_OPENPAR:
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATE:
      case K_DATETIME:
      case K_TIMESTAMP:
      case K_TIME:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_OBJECT_NAME:
      case 211:
      case 218:
      case 219:
      case 221:
      case 223:
      case 224:
      case 225:
        result = regularCondition();
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression regularCondition() throws ParseException {
        Expression result = null;
        Expression leftExpression;
        Expression rightExpression;
        boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                    not = true;
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
    leftExpression = comparisonItem();
                                          result = leftExpression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 212:
      jj_consume_token(212);
              result = new GreaterThan();
      break;
    case 213:
      jj_consume_token(213);
                result = new MinorThan();
      break;
    case K_EQUALS:
      jj_consume_token(K_EQUALS);
                result = new EqualsTo();
      break;
    case 214:
      jj_consume_token(214);
                 result = new GreaterThanEquals();
      break;
    case 215:
      jj_consume_token(215);
                 result = new MinorThanEquals();
      break;
    case 216:
    case 217:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 216:
        jj_consume_token(216);
        break;
      case 217:
        jj_consume_token(217);
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          result = new NotEqualsTo();
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rightExpression = comparisonItem();
                BinaryExpression regCond = (BinaryExpression) result;
                regCond.setLeftExpression(leftExpression);
                regCond.setRightExpression(rightExpression);
                if (not)
                        regCond.setNot();
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression sqlCondition() throws ParseException {
        Expression result;
    if (jj_2_20(2147483647)) {
      result = inExpression();
    } else if (jj_2_21(2147483647)) {
      result = between();
    } else if (jj_2_22(2147483647)) {
      result = isNullExpression();
    } else if (jj_2_23(2147483647)) {
      result = existsExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_REPLACE:
      case K_OPENPAR:
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATE:
      case K_DATETIME:
      case K_TIMESTAMP:
      case K_TIME:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_OBJECT_NAME:
      case 211:
      case 218:
      case 219:
      case 221:
      case 223:
      case 224:
      case 225:
        result = likeExpression();
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression inExpression() throws ParseException {
        InExpression result = new InExpression();
        ItemsList itemsList = null;
        Expression leftExpression = null;
    leftExpression = simpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
               result.setNot(true);
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(K_OPENPAR);
    if (jj_2_24(2147483647)) {
      itemsList = subSelect();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_REPLACE:
      case K_OPENPAR:
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATE:
      case K_DATETIME:
      case K_TIMESTAMP:
      case K_TIME:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_OBJECT_NAME:
      case 211:
      case 218:
      case 219:
      case 221:
      case 223:
      case 224:
      case 225:
        itemsList = simpleExpressionList();
        break;
      default:
        jj_la1[126] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(K_CLOSEPAR);
                result.setLeftExpression(leftExpression);
                result.setItemsList(itemsList);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression between() throws ParseException {
        Between result = new Between();
        Expression leftExpression = null;
        Expression betweenExpressionStart = null;
        Expression betweenExpressionEnd = null;
    leftExpression = simpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                       result.setNot(true);
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    betweenExpressionStart = simpleExpression();
    jj_consume_token(K_AND);
    betweenExpressionEnd = simpleExpression();
                result.setLeftExpression(leftExpression);
                result.setBetweenExpressionStart(betweenExpressionStart);
                result.setBetweenExpressionEnd(betweenExpressionEnd);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression likeExpression() throws ParseException {
        LikeExpression result = new LikeExpression();
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = simpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
               result.setNot(true);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    rightExpression = simpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ESCAPE:
      jj_consume_token(K_ESCAPE);
      token = jj_consume_token(S_CHAR_LITERAL);
                                         result.setEscape((new StringValue(token.image)).getValue());
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
                result.setLeftExpression(leftExpression);
                result.setRightExpression(rightExpression);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression isNullExpression() throws ParseException {
        IsNullExpression result = new IsNullExpression();
        Expression leftExpression = null;
    leftExpression = simpleExpression();
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                      result.setNot(true);
      break;
    default:
      jj_la1[130] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
                result.setLeftExpression(leftExpression);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression existsExpression() throws ParseException {
        ExistsExpression result = new ExistsExpression();
        Expression rightExpression = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
               result.setNot(true);
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    rightExpression = simpleExpression();
                result.setRightExpression(rightExpression);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList sqlExpressionList() throws ParseException {
        ExpressionList retval = new ExpressionList();
        List expressions = new ArrayList();
        Expression expr = null;
    expr = expression();
                        expressions.add(expr);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_22;
      }
      jj_consume_token(K_COMMA);
      expr = expression();
                                                                          expressions.add(expr);
    }
                retval.setExpressions(expressions);
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList simpleExpressionList() throws ParseException {
        ExpressionList retval = new ExpressionList();
        List expressions = new ArrayList();
        Expression expr = null;
    expr = simpleExpression();
                              expressions.add(expr);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[133] = jj_gen;
        break label_23;
      }
      jj_consume_token(K_COMMA);
      expr = simpleExpression();
                                                                                      expressions.add(expr);
    }
                retval.setExpressions(expressions);
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression comparisonItem() throws ParseException {
        Expression retval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
      retval = allComparisonExpression();
      break;
    case K_ANY:
    case K_SOME:
      retval = anyComparisonExpression();
      break;
    case K_NULL:
    case K_CASE:
    case K_REPLACE:
    case K_OPENPAR:
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATE:
    case K_DATETIME:
    case K_TIMESTAMP:
    case K_TIME:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_OBJECT_NAME:
    case 211:
    case 218:
    case 219:
    case 221:
    case 223:
    case 224:
    case 225:
      retval = simpleExpression();
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression allComparisonExpression() throws ParseException {
        AllComparisonExpression retval = null;
        SubSelect subselect = null;
    jj_consume_token(K_ALL);
    jj_consume_token(K_OPENPAR);
    subselect = subSelect();
    jj_consume_token(K_CLOSEPAR);
                                         retval = new AllComparisonExpression(subselect);
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression anyComparisonExpression() throws ParseException {
        AnyComparisonExpression retval = null;
        SubSelect subselect = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ANY:
      jj_consume_token(K_ANY);
      break;
    case K_SOME:
      jj_consume_token(K_SOME);
      break;
    default:
      jj_la1[135] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_OPENPAR);
    subselect = subSelect();
    jj_consume_token(K_CLOSEPAR);
                                                      retval = new AnyComparisonExpression(subselect);
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression simpleExpression() throws ParseException {
        Expression retval = null;
    if (jj_2_25(2147483647)) {
      retval = additiveExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OPENPAR:
        jj_consume_token(K_OPENPAR);
        retval = additiveExpression();
        jj_consume_token(K_CLOSEPAR);
                                                     retval = new Parenthesis(retval);
        break;
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression additiveExpression() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = multiplicativeExpression();
                                                 result = leftExpression;
    label_24:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 218:
        jj_consume_token(218);
                            result = new Addition();
        break;
      case 219:
        jj_consume_token(219);
                                                                        result = new Subtraction();
        break;
      case K_CONCAT:
        jj_consume_token(K_CONCAT);
                                                                        result = new Concatenation();
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightExpression = multiplicativeExpression();
                        BinaryExpression binExp = (BinaryExpression) result;
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multiplicativeExpression() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    if (jj_2_27(2147483647)) {
      leftExpression = primaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OPENPAR:
        jj_consume_token(K_OPENPAR);
        leftExpression = additiveExpression();
        jj_consume_token(K_CLOSEPAR);
                                                         leftExpression = new Parenthesis(leftExpression);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        result = leftExpression;
    label_25:
    while (true) {
      if (jj_2_28(2)) {
        ;
      } else {
        break label_25;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 210:
        jj_consume_token(210);
                            result = new Multiplication();
        break;
      case 220:
        jj_consume_token(220);
                                                                        result = new Division();
        break;
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_29(2147483647)) {
        rightExpression = primaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OPENPAR:
          jj_consume_token(K_OPENPAR);
          rightExpression = additiveExpression();
          jj_consume_token(K_CLOSEPAR);
                                                                                                  rightExpression = new Parenthesis(rightExpression);
          break;
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                        BinaryExpression binExp = (BinaryExpression) result;
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression primaryExpression() throws ParseException {
        Expression retval = null;
        Token token = null;
        boolean isInverse = false;
        String tmp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
                   retval = new NullValue();
      break;
    case K_CASE:
      retval = caseWhenExpression();
      break;
    case 211:
      jj_consume_token(211);
                retval = new JdbcParameter();
      break;
    default:
      jj_la1[153] = jj_gen;
      if (jj_2_30(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 218:
        case 219:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 218:
            jj_consume_token(218);
            break;
          case 219:
            jj_consume_token(219);
                                                              isInverse = true;
            break;
          default:
            jj_la1[141] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[142] = jj_gen;
          ;
        }
        retval = function();
      } else if (jj_2_31(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 218:
        case 219:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 218:
            jj_consume_token(218);
            break;
          case 219:
            jj_consume_token(219);
                                                                    tmp = "-";
            break;
          default:
            jj_la1[143] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[144] = jj_gen;
          ;
        }
        token = jj_consume_token(S_DOUBLE);
                                                                                                      retval = new DoubleValue(tmp+token.image);
      } else if (jj_2_32(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 218:
        case 219:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 218:
            jj_consume_token(218);
            break;
          case 219:
            jj_consume_token(219);
                                                                            tmp = "-";
            break;
          default:
            jj_la1[145] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[146] = jj_gen;
          ;
        }
        token = jj_consume_token(S_INTEGER);
                                                                                                               retval = new LongValue(tmp+token.image);
      } else if (jj_2_33(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 218:
        case 219:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 218:
            jj_consume_token(218);
            break;
          case 219:
            jj_consume_token(219);
                                      isInverse = true;
            break;
          default:
            jj_la1[147] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[148] = jj_gen;
          ;
        }
        retval = column();
      } else if (jj_2_34(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 218:
        case 219:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 218:
            jj_consume_token(218);
            break;
          case 219:
            jj_consume_token(219);
                                     isInverse = true;
            break;
          default:
            jj_la1[149] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[150] = jj_gen;
          ;
        }
        jj_consume_token(K_OPENPAR);
        retval = primaryExpression();
        jj_consume_token(K_CLOSEPAR);
                                                                                               retval = new Parenthesis(retval);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_CHAR_LITERAL:
          token = jj_consume_token(S_CHAR_LITERAL);
                                   retval = new StringValue(token.image);
          break;
        case K_OPENPAR:
        case 218:
        case 219:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 218:
          case 219:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 218:
              jj_consume_token(218);
              break;
            case 219:
              jj_consume_token(219);
                        isInverse = true;
              break;
            default:
              jj_la1[151] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[152] = jj_gen;
            ;
          }
          jj_consume_token(K_OPENPAR);
          retval = subSelect();
          jj_consume_token(K_CLOSEPAR);
          break;
        case K_DATE:
          jj_consume_token(K_DATE);
          token = jj_consume_token(S_CHAR_LITERAL);
                                      retval = new DateValue(token.image);
          break;
        case K_TIME:
          jj_consume_token(K_TIME);
          token = jj_consume_token(S_CHAR_LITERAL);
                                      retval = new TimeValue(token.image);
          break;
        case K_TIMESTAMP:
          jj_consume_token(K_TIMESTAMP);
          token = jj_consume_token(S_CHAR_LITERAL);
                                           retval = new TimestampValue(token.image);
          break;
        case 221:
          jj_consume_token(221);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(222);
                                                  retval = new DateValue(token.image);
          break;
        case 223:
          jj_consume_token(223);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(222);
                                                  retval = new TimeValue(token.image);
          break;
        case 224:
          jj_consume_token(224);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(222);
                                                   retval = new TimestampValue(token.image);
          break;
        default:
          jj_la1[154] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                if (isInverse) {
                        retval = new InverseExpression(retval);
                }
        {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression caseWhenExpression() throws ParseException {
        CaseExpression caseExp = new CaseExpression();
        Expression switchExp = null;
        WhenClause clause;
        List whenClauses = new ArrayList();
        Expression elseExp = null;
    jj_consume_token(K_CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHEN:
      label_26:
      while (true) {
        clause = whenThenSearchCondition();
                                                 whenClauses.add(clause);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          jj_la1[155] = jj_gen;
          break label_26;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        elseExp = primaryExpression();
        break;
      default:
        jj_la1[156] = jj_gen;
        ;
      }
      break;
    case K_NULL:
    case K_CASE:
    case K_REPLACE:
    case K_OPENPAR:
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATE:
    case K_DATETIME:
    case K_TIMESTAMP:
    case K_TIME:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_OBJECT_NAME:
    case 211:
    case 218:
    case 219:
    case 221:
    case 223:
    case 224:
    case 225:
      switchExp = primaryExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          jj_la1[157] = jj_gen;
          break label_27;
        }
        clause = whenThenValue();
                                        whenClauses.add(clause);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        elseExp = primaryExpression();
        break;
      default:
        jj_la1[158] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_END);
        caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
                caseExp.setElseExpression(elseExp);
        {if (true) return caseExp;}
    throw new Error("Missing return statement in function");
  }

  final public WhenClause whenThenSearchCondition() throws ParseException {
        WhenClause whenThen = new WhenClause();
        Expression whenExp = null;
        Expression thenExp = null;
    jj_consume_token(K_WHEN);
    whenExp = expression();
    jj_consume_token(K_THEN);
    thenExp = simpleExpression();
           whenThen.setWhenExpression(whenExp);
           whenThen.setThenExpression(thenExp);
           {if (true) return whenThen;}
    throw new Error("Missing return statement in function");
  }

  final public WhenClause whenThenValue() throws ParseException {
        WhenClause whenThen = new WhenClause();
        Expression whenExp = null;
        Expression thenExp = null;
    jj_consume_token(K_WHEN);
    whenExp = primaryExpression();
    jj_consume_token(K_THEN);
    thenExp = primaryExpression();
           whenThen.setWhenExpression(whenExp);
           whenThen.setThenExpression(thenExp);
           {if (true) return whenThen;}
    throw new Error("Missing return statement in function");
  }

  final public Function function() throws ParseException {
        Function retval = new Function();
        String funcName = null;
        String tmp = null;
        ExpressionList expressionList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 225:
      jj_consume_token(225);
                 retval.setEscaped(true);
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATETIME:
    case S_IDENTIFIER:
    case S_OBJECT_NAME:
      funcName = relObjectName();
      break;
    case K_REPLACE:
      jj_consume_token(K_REPLACE);
                          funcName = "REPLACE";
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 209:
      jj_consume_token(209);
      tmp = relObjectName();
                                  funcName+= "." + tmp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 209:
        jj_consume_token(209);
        tmp = relObjectName();
                                                                                     funcName+= "." + tmp;
        break;
      default:
        jj_la1[162] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[163] = jj_gen;
      ;
    }
    jj_consume_token(K_OPENPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_NULL:
    case K_CASE:
    case K_REPLACE:
    case K_DISTINCT:
    case K_OPENPAR:
    case K_CHECKSUM:
    case K_TYPE:
    case K_DATE:
    case K_DATETIME:
    case K_TIMESTAMP:
    case K_TIME:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_OBJECT_NAME:
    case 210:
    case 211:
    case 218:
    case 219:
    case 221:
    case 223:
    case 224:
    case 225:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        default:
          jj_la1[164] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[165] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_REPLACE:
      case K_OPENPAR:
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATE:
      case K_DATETIME:
      case K_TIMESTAMP:
      case K_TIME:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_OBJECT_NAME:
      case 211:
      case 218:
      case 219:
      case 221:
      case 223:
      case 224:
      case 225:
        expressionList = simpleExpressionList();
        break;
      case 210:
        jj_consume_token(210);
                                                                                  retval.setAllColumns(true);
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
    jj_consume_token(K_CLOSEPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 222:
      jj_consume_token(222);
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
            retval.setParameters(expressionList);
            retval.setName(funcName);
        {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public SubSelect subSelect() throws ParseException {
        SelectBody selectBody = null;
    selectBody = selectBody();
        SubSelect subSelect = new SubSelect();
        subSelect.setSelectBody(selectBody);
        {if (true) return subSelect;}
    throw new Error("Missing return statement in function");
  }

  final public CreateIndex createIndex() throws ParseException {
        CreateIndex stmt=null;
        Index index=null;
        Table table=null;
        String archiveType=null;
        Column column=null;
        Token indexName=null;
        String indexOption=null;
        Token op1=null;
        Token op2=null;
        Token length;
        //WILL BE USED A GENERIC LIST, NOT THE PRODUCTION COLUMNNAMESLIST IN ORDER TO ALLOW THE ASC/DESC OPTION
        List columnNames= new ArrayList();
        List createOptions = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ONLINE:
    case K_OFFLINE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ONLINE:
        op1 = jj_consume_token(K_ONLINE);
        break;
      case K_OFFLINE:
        op1 = jj_consume_token(K_OFFLINE);
        break;
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        if(op1!=null){
                                createOptions.add(op1.image);
                        }
      break;
    default:
      jj_la1[170] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UNIQUE:
    case K_SPATIAL:
    case K_FULLTEXT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UNIQUE:
        op2 = jj_consume_token(K_UNIQUE);
        break;
      case K_FULLTEXT:
        op2 = jj_consume_token(K_FULLTEXT);
        break;
      case K_SPATIAL:
        op2 = jj_consume_token(K_SPATIAL);
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        if(op2!=null){
                        createOptions.add(op2.image);
                        }
      break;
    default:
      jj_la1[172] = jj_gen;
      ;
    }
    jj_consume_token(K_INDEX);
    indexName = jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_USING:
      archiveType = archiveType();
      break;
    default:
      jj_la1[173] = jj_gen;
      ;
    }
    jj_consume_token(K_ON);
    table = table();
    jj_consume_token(K_OPENPAR);
    column = column();
                             columnNames.add(column);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OPENPAR:
      jj_consume_token(K_OPENPAR);
      length = jj_consume_token(S_INTEGER);
      jj_consume_token(K_CLOSEPAR);
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
        break;
      default:
        jj_la1[175] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[176] = jj_gen;
      ;
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[177] = jj_gen;
        break label_28;
      }
      jj_consume_token(K_COMMA);
      column = column();
                                             columnNames.add(column);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OPENPAR:
        jj_consume_token(K_OPENPAR);
        length = jj_consume_token(S_INTEGER);
        jj_consume_token(K_CLOSEPAR);
        break;
      default:
        jj_la1[178] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
          break;
        default:
          jj_la1[179] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[180] = jj_gen;
        ;
      }
    }
    jj_consume_token(K_CLOSEPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WITH:
    case K_USING:
    case K_COMMENT:
    case K_KEY_BLOCK_SIZE:
      indexOption = indexOption();
      break;
    default:
      jj_la1[181] = jj_gen;
      ;
    }
                stmt = new CreateIndex();
                stmt.setTable(table);
                stmt.setCreateOptions(createOptions);
                index = new Index();
                index.setName(indexName.image);
                index.setColumnsNames(columnNames);
                index.setArchiveType(archiveType);
                index.setIndexOption(indexOption);
                stmt.setIndex(index);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTable createTable() throws ParseException {
        CreateTable createTable = new CreateTable();
        Table table = null;
        ArrayList columnDefinitions = new ArrayList();
        ColumnDefinition columnDefinition;
        Column column;
        List tableOptions = new ArrayList();
        Token tk = null;
        Token tk2 = null;
        Token tk3 = null;
        String stringList = null;
        List indexes = new ArrayList();
        Index index = null;
        String parameter = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GLOBAL:
    case K_LOCAL:
    case K_TEMPORARY:
    case K_TEMP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GLOBAL:
      case K_LOCAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_GLOBAL:
          jj_consume_token(K_GLOBAL);
          break;
        case K_LOCAL:
          jj_consume_token(K_LOCAL);
          break;
        default:
          jj_la1[182] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[183] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TEMPORARY:
        jj_consume_token(K_TEMPORARY);
        break;
      case K_TEMP:
        jj_consume_token(K_TEMP);
        break;
      default:
        jj_la1[184] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[185] = jj_gen;
      ;
    }
    jj_consume_token(K_TABLE);
    table = table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OPENPAR:
      jj_consume_token(K_OPENPAR);
      column = column();
      columnDefinition = columnDefinition();
                        columnDefinition.setColumnName(column);
                        columnDefinitions.add(columnDefinition);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[186] = jj_gen;
          break label_29;
        }
        jj_consume_token(K_COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_KEY:
        case K_INDEX:
        case K_UNIQUE:
        case K_PRIMARY:
        case K_SPATIAL:
        case K_FOREIGN:
        case K_FULLTEXT:
        case K_CONSTRAINT:
          //CHECK THE POSITION WHERE THE INDEX CAN BE CREATED
                                          //ONLY AT THE END OR ALSO BETWEEEN OTHER FIELDS
                                          index = indexDefinition();
                                                         indexes.add(index);
          break;
        case K_CHECKSUM:
        case K_TYPE:
        case K_DATETIME:
        case S_IDENTIFIER:
        case S_OBJECT_NAME:
          column = column();
          columnDefinition = columnDefinition();
                                                columnDefinition.setColumnName(column);
                                                columnDefinitions.add(columnDefinition);
          break;
        default:
          jj_la1[187] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(K_CLOSEPAR);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UNION:
        case K_INDEX:
        case K_COMMENT:
        case K_DEFAULT:
        case K_TABLESPACE:
        case K_KEY_BLOCK_SIZE:
        case K_AUTO_INCREMENT:
        case K_ENGINE:
        case K_AVG_ROW_LENGTH:
        case K_CHECKSUM:
        case K_CONNECTION:
        case K_DATA:
        case K_DELAY_KEY_WRITE:
        case K_INSERT_METHOD:
        case K_MAX_ROWS:
        case K_MIN_ROWS:
        case K_PACK_KEYS:
        case K_PASSWORD:
        case K_ROW_FORMAT:
        case K_TYPE:
        case K_CHARSET:
        case K_CHARACTER:
        case K_COLLATE:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_30;
        }
        parameter = tableOption();
                                                  tableOptions.add(parameter);
      }
      break;
    default:
      jj_la1[189] = jj_gen;
      ;
    }
                createTable.setTable(table);
                if (indexes.size() > 0)
                        createTable.setIndexes(indexes);
                if (tableOptions.size() > 0)
                        createTable.setTableOptionsStrings(tableOptions);
                if (columnDefinitions.size() > 0)
                        createTable.setColumnDefinitions(columnDefinitions);
                {if (true) return createTable;}
    throw new Error("Missing return statement in function");
  }

  final public Index indexDefinition() throws ParseException {
        Token tk1=null;
        Token tk2=null;
        Token tk3=null;
        Token matchType;
        Token constraintWidth=null;
        Token constraintType=null;
        Token op1=null;
        Token op2=null;
        Token op3=null;
        Token op4=null;
        Table referencedTable=null;
        String archiveType = null;
        String option="";
        String constraintName=null;
        List columnList;
        List referencedColumnList=null;
        String indexOption=null;
        Index index=null;
        List<String> onOptions;
        ReferenceDefinition reference;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SPATIAL:
    case K_FULLTEXT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FULLTEXT:
        constraintWidth = jj_consume_token(K_FULLTEXT);
        break;
      case K_SPATIAL:
        constraintWidth = jj_consume_token(K_SPATIAL);
        break;
      default:
        jj_la1[190] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                index = new Index();
                index.setWidth(constraintWidth.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_KEY:
      case K_INDEX:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INDEX:
          constraintType = jj_consume_token(K_INDEX);
          break;
        case K_KEY:
          constraintType = jj_consume_token(K_KEY);
          break;
        default:
          jj_la1[191] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                index.setType(constraintType.image);
        break;
      default:
        jj_la1[192] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATETIME:
      case S_IDENTIFIER:
      case S_OBJECT_NAME:
        constraintName = relObjectName();
        break;
      default:
        jj_la1[193] = jj_gen;
        ;
      }
      columnList = columnsNamesList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WITH:
      case K_USING:
      case K_COMMENT:
      case K_KEY_BLOCK_SIZE:
        indexOption = indexOption();
        break;
      default:
        jj_la1[194] = jj_gen;
        ;
      }
                index.setName(constraintName!=null?constraintName:null);
                index.setColumnsNames(columnList);
                if(indexOption != null){
                        index.setIndexOption(indexOption);
                }
                {if (true) return index;}
      break;
    case K_KEY:
    case K_INDEX:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INDEX:
        constraintType = jj_consume_token(K_INDEX);
        break;
      case K_KEY:
        constraintType = jj_consume_token(K_KEY);
        break;
      default:
        jj_la1[195] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        index = new Index();
                        index.setType(constraintType.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHECKSUM:
      case K_TYPE:
      case K_DATETIME:
      case S_IDENTIFIER:
      case S_OBJECT_NAME:
        constraintName = relObjectName();
        break;
      default:
        jj_la1[196] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_USING:
        archiveType = archiveType();
        break;
      default:
        jj_la1[197] = jj_gen;
        ;
      }
      columnList = columnsNamesList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WITH:
      case K_USING:
      case K_COMMENT:
      case K_KEY_BLOCK_SIZE:
        indexOption = indexOption();
        break;
      default:
        jj_la1[198] = jj_gen;
        ;
      }
                        index.setName(constraintName!=null?constraintName:null);
                        if(archiveType != null){
                                index.setArchiveType(archiveType);
                        }
                        index.setColumnsNames(columnList);
                        if(indexOption != null){
                                index.setIndexOption(indexOption);
                        }
                        {if (true) return index;}
      break;
    case K_UNIQUE:
    case K_PRIMARY:
    case K_FOREIGN:
    case K_CONSTRAINT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CONSTRAINT:
        jj_consume_token(K_CONSTRAINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CHECKSUM:
        case K_TYPE:
        case K_DATETIME:
        case S_IDENTIFIER:
        case S_OBJECT_NAME:
          constraintName = relObjectName();
          break;
        default:
          jj_la1[199] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[200] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PRIMARY:
        tk1 = jj_consume_token(K_PRIMARY);
        tk2 = jj_consume_token(K_KEY);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_USING:
          archiveType = archiveType();
          break;
        default:
          jj_la1[201] = jj_gen;
          ;
        }
        columnList = columnsNamesList();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WITH:
        case K_USING:
        case K_COMMENT:
        case K_KEY_BLOCK_SIZE:
          indexOption = indexOption();
          break;
        default:
          jj_la1[202] = jj_gen;
          ;
        }
                                index = new Index();
                                if(constraintName != null){
                                index.setName(constraintName);
                        }
                                index.setType(tk1.image + " " + tk2.image);
                                if(archiveType != null){
                                        index.setArchiveType(archiveType);
                                }
                                index.setColumnsNames(columnList);
                                if(indexOption != null){
                                        index.setIndexOption(indexOption);
                                }
        break;
      case K_FOREIGN:
        tk1 = jj_consume_token(K_FOREIGN);
        tk2 = jj_consume_token(K_KEY);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CHECKSUM:
        case K_TYPE:
        case K_DATETIME:
        case S_IDENTIFIER:
        case S_OBJECT_NAME:
          constraintName = relObjectName();
          break;
        default:
          jj_la1[203] = jj_gen;
          ;
        }
        columnList = columnsNamesList();
        reference = referenceDefinition();
                        ForeignKey fkey = new ForeignKey();
                        fkey.setType(tk1.image + " " + tk2.image);
                        if(constraintName != null){
                                fkey.setName(constraintName);
                        }
                                fkey.setColumnsNames(columnList);
                                fkey.setReferenceDefinition(reference);
                                {if (true) return fkey;}
        break;
      case K_UNIQUE:
        tk1 = jj_consume_token(K_UNIQUE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_KEY:
        case K_INDEX:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_INDEX:
            tk2 = jj_consume_token(K_INDEX);
            break;
          case K_KEY:
            tk2 = jj_consume_token(K_KEY);
            break;
          default:
            jj_la1[204] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[205] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CHECKSUM:
        case K_TYPE:
        case K_DATETIME:
        case S_IDENTIFIER:
        case S_OBJECT_NAME:
          constraintName = relObjectName();
          break;
        default:
          jj_la1[206] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_USING:
          archiveType = archiveType();
          break;
        default:
          jj_la1[207] = jj_gen;
          ;
        }
        columnList = columnsNamesList();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WITH:
        case K_USING:
        case K_COMMENT:
        case K_KEY_BLOCK_SIZE:
          indexOption = indexOption();
          break;
        default:
          jj_la1[208] = jj_gen;
          ;
        }
                        index = new Index();
                                index.setType(tk2!=null?tk1.image + " " + tk2.image:tk1.image);
                                if(constraintName != null){
                                        index.setName(constraintName);
                                }
                                if(archiveType != null){
                                        index.setArchiveType(archiveType);
                                }
                                index.setColumnsNames(columnList);
                                if(indexOption!=null){
                                        index.setIndexOption(indexOption);
                                }
        break;
      default:
        jj_la1[209] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[210] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return index;}
    throw new Error("Missing return statement in function");
  }

  final public ReferenceDefinition referenceDefinition() throws ParseException {
        ReferenceDefinition reference = new ReferenceDefinition();
        Table referencedTable;
        List<String> referencedColumnList;
        Token matchType,op1;
        String referentialActions[] = new String[2];
        Boolean onDeleteOption;
        Boolean onUpdateOption;
    jj_consume_token(K_REFERENCES);
    referencedTable = table();
    referencedColumnList = columnsNamesList();
                reference.setColumnsReferenced(referencedColumnList);
                reference.setTableReferenced(referencedTable);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_MATCH:
      jj_consume_token(K_MATCH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FULL:
        matchType = jj_consume_token(K_FULL);
        break;
      case K_PARTIAL:
        matchType = jj_consume_token(K_PARTIAL);
        break;
      case K_SIMPLE:
        matchType = jj_consume_token(K_SIMPLE);
        break;
      default:
        jj_la1[211] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        reference.setMatchType(matchType.image);
      break;
    default:
      jj_la1[212] = jj_gen;
      ;
    }
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ON:
        ;
        break;
      default:
        jj_la1[213] = jj_gen;
        break label_31;
      }
      op1 = jj_consume_token(K_ON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DELETE:
        referentialActions[0] = deleteReferentialAction();
        break;
      case K_UPDATE:
        referentialActions[1] = updateReferentialAction();
        break;
      default:
        jj_la1[214] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return reference;}
    throw new Error("Missing return statement in function");
  }

  final public String deleteReferentialAction() throws ParseException {
        String deleteAction;
        Boolean onDeleteOption = false;
        Token op2=null;
        Token op3=null;
        Token op4=null;
    op2 = jj_consume_token(K_DELETE);
                if(onDeleteOption){
                        {if (true) throw new ParseException("Parse Exception: la stessa referential action, ON DELETE,  pu\u221a\u2264 essere inserita una sola volta");}
                }
                //referentialActions[0] = referentialActions[0] + op1.image + op2.image;
                onDeleteOption = true;
                deleteAction = "ON " + op2.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_RESTRICT:
      op3 = jj_consume_token(K_RESTRICT);
      break;
    case K_CASCADE:
      op3 = jj_consume_token(K_CASCADE);
      break;
    case K_SET:
      op3 = jj_consume_token(K_SET);
      op4 = jj_consume_token(K_NULL);
      break;
    case K_NO:
      op3 = jj_consume_token(K_NO);
      op4 = jj_consume_token(K_ACTION);
      break;
    default:
      jj_la1[215] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                //deleteAction+=(op2!=null?op2.image:"");
                deleteAction+=(op3!=null?op3.image:"");
                deleteAction+=(op4!=null?op4.image:"");
                {if (true) return deleteAction;}
    throw new Error("Missing return statement in function");
  }

  final public String updateReferentialAction() throws ParseException {
        String updateAction;
        Boolean onUpdateOption = false;
        Token op2=null;
        Token op3=null;
        Token op4=null;
    op2 = jj_consume_token(K_UPDATE);
                if(onUpdateOption){
                        {if (true) throw new ParseException("Parse Exception: la stessa referential action, ON UPDATE,  pu\u221a\u2264 essere inserita una sola volta");}
                }
                //referentialActions[0] = referentialActions[0] + op1.image + op2.image;
                onUpdateOption = true;
                updateAction = "ON " + op2.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_RESTRICT:
      op3 = jj_consume_token(K_RESTRICT);
      break;
    case K_CASCADE:
      op3 = jj_consume_token(K_CASCADE);
      break;
    case K_SET:
      op3 = jj_consume_token(K_SET);
      op4 = jj_consume_token(K_NULL);
      break;
    case K_NO:
      op3 = jj_consume_token(K_NO);
      op4 = jj_consume_token(K_ACTION);
      break;
    default:
      jj_la1[216] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                //updateAction+=(op2!=null?op2.image:"");
                updateAction+=(op3!=null?op3.image:"");
                updateAction+=(op4!=null?op4.image:"");
                {if (true) return updateAction;}
    throw new Error("Missing return statement in function");
  }

  final public String indexOption() throws ParseException {
        String indexOption;
        Token tk1, tk2, tk3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_KEY_BLOCK_SIZE:
      tk1 = jj_consume_token(K_KEY_BLOCK_SIZE);
      tk2 = jj_consume_token(K_EQUALS);
      tk3 = jj_consume_token(S_INTEGER);
        indexOption = tk1.image + "" + tk2.image + "" + tk3.image;
      break;
    case K_USING:
      indexOption = archiveType();
      break;
    case K_WITH:
      tk1 = jj_consume_token(K_WITH);
      tk2 = jj_consume_token(K_PARSER);
      tk3 = jj_consume_token(S_IDENTIFIER);
        indexOption = tk1.image + "" + tk2.image + "" + tk3.image;
      break;
    case K_COMMENT:
      tk1 = jj_consume_token(K_COMMENT);
      tk2 = jj_consume_token(S_IDENTIFIER);
        indexOption = tk1.image + "" + tk2.image;
        {if (true) return indexOption;}
      break;
    default:
      jj_la1[217] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String archiveType() throws ParseException {
        Token tk1;
        Token tk2;
        String indexType;
    tk1 = jj_consume_token(K_USING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_RTREE:
      tk2 = jj_consume_token(K_RTREE);
      break;
    case K_BTREE:
      tk2 = jj_consume_token(K_BTREE);
      break;
    case K_HASH:
      tk2 = jj_consume_token(K_HASH);
      break;
    default:
      jj_la1[218] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        indexType = tk1.image + " " + tk2.image;
        {if (true) return indexType;}
    throw new Error("Missing return statement in function");
  }

  final public String tableOption() throws ParseException {
        Token op1=null;
        Token op2=null;
        Token op3=null;
        Token op4=null;
        Token op5=null;
        String tableOptions = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ENGINE:
    case K_TYPE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TYPE:
        op1 = jj_consume_token(K_TYPE);
        break;
      case K_ENGINE:
        op1 = jj_consume_token(K_ENGINE);
        break;
      default:
        jj_la1[219] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op2 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[220] = jj_gen;
        ;
      }
      op3 = jj_consume_token(S_IDENTIFIER);
      break;
    case K_AUTO_INCREMENT:
      op1 = jj_consume_token(K_AUTO_INCREMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op2 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[221] = jj_gen;
        ;
      }
      op3 = jj_consume_token(S_INTEGER);
      break;
    case K_AVG_ROW_LENGTH:
      op1 = jj_consume_token(K_AVG_ROW_LENGTH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op2 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[222] = jj_gen;
        ;
      }
      op3 = jj_consume_token(S_INTEGER);
      break;
    case K_DEFAULT:
    case K_CHARSET:
    case K_CHARACTER:
    case K_COLLATE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        op1 = jj_consume_token(K_DEFAULT);
        break;
      default:
        jj_la1[223] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHARSET:
      case K_CHARACTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_CHARACTER:
          op2 = jj_consume_token(K_CHARACTER);
          op3 = jj_consume_token(K_SET);
          break;
        case K_CHARSET:
          op2 = jj_consume_token(K_CHARSET);
          break;
        default:
          jj_la1[224] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_EQUALS:
          op4 = jj_consume_token(K_EQUALS);
          break;
        default:
          jj_la1[225] = jj_gen;
          ;
        }
        op5 = jj_consume_token(S_IDENTIFIER);
        break;
      case K_COLLATE:
        op2 = jj_consume_token(K_COLLATE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_EQUALS:
          op3 = jj_consume_token(K_EQUALS);
          break;
        default:
          jj_la1[226] = jj_gen;
          ;
        }
        op4 = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[227] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_CHECKSUM:
      op1 = jj_consume_token(K_CHECKSUM);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op2 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[228] = jj_gen;
        ;
      }
      op3 = jj_consume_token(S_INTEGER);
      break;
    case K_COMMENT:
      op1 = jj_consume_token(K_COMMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op2 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[229] = jj_gen;
        ;
      }
      op3 = jj_consume_token(S_CHAR_LITERAL);
      break;
    case K_CONNECTION:
      op1 = jj_consume_token(K_CONNECTION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op2 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[230] = jj_gen;
        ;
      }
      op3 = jj_consume_token(S_CHAR_LITERAL);
      break;
    case K_DATA:
      op1 = jj_consume_token(K_DATA);
      op2 = jj_consume_token(K_DIRECTORY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EQUALS:
        op3 = jj_consume_token(K_EQUALS);
        break;
      default:
        jj_la1[231] = jj_gen;
        ;
      }
      op4 = jj_consume_token(S_CHAR_LITERAL);
      break;
    case K_DELAY_KEY_WRITE:
      op1 = jj_consume_token(K_DELAY_KEY_WRITE);
      op2 = jj_consume_token(K_EQUALS);
      op3 = jj_consume_token(S_INTEGER);
      break;
    case K_INDEX:
      op1 = jj_consume_token(K_INDEX);
      op2 = jj_consume_token(K_DIRECTORY);
      op3 = jj_consume_token(K_EQUALS);
      op4 = jj_consume_token(S_IDENTIFIER);
      break;
    case K_INSERT_METHOD:
      op1 = jj_consume_token(K_INSERT_METHOD);
      op2 = jj_consume_token(K_EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NO:
        op3 = jj_consume_token(K_NO);
        break;
      case K_FIRST:
        op3 = jj_consume_token(K_FIRST);
        break;
      case K_LAST:
        op3 = jj_consume_token(K_LAST);
        break;
      default:
        jj_la1[232] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_KEY_BLOCK_SIZE:
      op1 = jj_consume_token(K_KEY_BLOCK_SIZE);
      op2 = jj_consume_token(K_EQUALS);
      break;
    case K_MAX_ROWS:
      op1 = jj_consume_token(K_MAX_ROWS);
      op2 = jj_consume_token(K_EQUALS);
      op3 = jj_consume_token(S_INTEGER);
      break;
    case K_MIN_ROWS:
      op1 = jj_consume_token(K_MIN_ROWS);
      op2 = jj_consume_token(K_EQUALS);
      op3 = jj_consume_token(S_INTEGER);
      break;
    case K_PACK_KEYS:
      op1 = jj_consume_token(K_PACK_KEYS);
      op2 = jj_consume_token(K_EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        op3 = jj_consume_token(S_INTEGER);
        break;
      case K_DEFAULT:
        op3 = jj_consume_token(K_DEFAULT);
        break;
      default:
        jj_la1[233] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_PASSWORD:
      op1 = jj_consume_token(K_PASSWORD);
      op2 = jj_consume_token(K_EQUALS);
      op3 = jj_consume_token(S_IDENTIFIER);
      break;
    case K_ROW_FORMAT:
      op1 = jj_consume_token(K_ROW_FORMAT);
      op2 = jj_consume_token(K_EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        op3 = jj_consume_token(K_DEFAULT);
        break;
      case K_DYNAMIC:
        op3 = jj_consume_token(K_DYNAMIC);
        break;
      case K_FIXED:
        op3 = jj_consume_token(K_FIXED);
        break;
      case K_COMPRESSED:
        op3 = jj_consume_token(K_COMPRESSED);
        break;
      case K_REDUNDANT:
        op3 = jj_consume_token(K_REDUNDANT);
        break;
      case K_COMPACT:
        op3 = jj_consume_token(K_COMPACT);
        break;
      default:
        jj_la1[234] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case K_TABLESPACE:
      op1 = jj_consume_token(K_TABLESPACE);
      op2 = jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_STORAGE:
        op3 = jj_consume_token(K_STORAGE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DISK:
          op4 = jj_consume_token(K_DISK);
          break;
        case K_MEMORY:
          op4 = jj_consume_token(K_MEMORY);
          break;
        case K_DEFAULT:
          op4 = jj_consume_token(K_DEFAULT);
          break;
        default:
          jj_la1[235] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[236] = jj_gen;
        ;
      }
      break;
    case K_UNION:
      op1 = jj_consume_token(K_UNION);
      op2 = jj_consume_token(K_EQUALS);
      table();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[237] = jj_gen;
          break label_32;
        }
        jj_consume_token(K_COMMA);
        table();
      }
      break;
    default:
      jj_la1[238] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                tableOptions += op1!=null?op1.image:"";
                tableOptions += op2!=null?op2.image:"";
                tableOptions += op3!=null?op3.image:"";
                tableOptions += op4!=null?op4.image:"";
                tableOptions += op5!=null?op5.image:"";
                {if (true) return tableOptions;}
    throw new Error("Missing return statement in function");
  }

  final public DataType colDataType() throws ParseException {
        DataType type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BIT:
    case K_TINYINT:
    case K_BOOL:
    case K_BOOLEAN:
    case K_SMALLINT:
    case K_MEDIUMINT:
    case K_INT:
    case K_INTEGER:
    case K_BIGINT:
    case K_FLOAT:
    case K_DOUBLE:
    case K_DECIMAL:
    case K_DEC:
    case K_NUMERIC:
    case K_FIXED:
      type = numericType();
      break;
    case K_DATE:
    case K_DATETIME:
    case K_TIMESTAMP:
    case K_TIME:
    case K_YEAR:
      type = dateType();
      break;
    case K_SET:
    case K_CHAR:
    case K_VARCHAR:
    case K_BINARY:
    case K_VARBINARY:
    case K_TINYBLOB:
    case K_TINYTEXT:
    case K_BLOB:
    case K_TEXT:
    case K_MEDIUMBLOB:
    case K_MEDIUMTEXT:
    case K_LONGBLOB:
    case K_LONGTEXT:
    case K_ENUM:
    case K_NATIONAL:
      type = stringType();
      break;
    default:
      jj_la1[239] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public TimestampDataType timestampType() throws ParseException {
        TimestampDataType type = new TimestampDataType();
        Token year=null;
        Token month=null;
        Token day=null;
        Token hour=null;
        Token minute=null;
        Token second=null;
        Token millis=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_INTEGER:
      year = jj_consume_token(S_INTEGER);
      jj_consume_token(219);
      month = jj_consume_token(S_INTEGER);
      jj_consume_token(219);
      day = jj_consume_token(S_INTEGER);
      hour = jj_consume_token(S_INTEGER);
      jj_consume_token(226);
      minute = jj_consume_token(S_INTEGER);
      jj_consume_token(226);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        second = jj_consume_token(S_INTEGER);
        break;
      case S_DOUBLE:
        second = jj_consume_token(S_DOUBLE);
        break;
      default:
        jj_la1[240] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        type.setYear(Integer.parseInt(year.image));
        type.setMonth(Integer.parseInt(month.image));
        type.setDay(Integer.parseInt(day.image));
        type.setHour(Integer.parseInt(hour.image));
        type.setMinute(Integer.parseInt(minute.image));
        int idx=(second.image).indexOf(".");
        String dec, rem="0";
        if(idx!=-1)
        {
                dec= second.image.substring(0,idx);
                if(second.image.length()>idx)
                        rem= second.image.substring(idx+1,second.image.length());
                type.setMillis(rem);
        }
        else
        {
                dec= second.image;
                type.setMillis("0");
        }
        type.setSecond(Integer.parseInt(dec));
        {if (true) return type;}
      break;
    case K_CURRENT_TIME:
      jj_consume_token(K_CURRENT_TIME);
        type.setCurrentTime(true);
        {if (true) return type;}
      break;
    default:
      jj_la1[241] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public NumericDataType numericType() throws ParseException {
        NumericDataType type = new NumericDataType();
        Token tk1=null;
        Token tk2 = null;
        Token unsigned=null;
        Token zerofill= null;
        Token precision=null;
        Token scale= null;
        String typeName;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_BIT:
      tk1 = jj_consume_token(K_BIT);
      if (jj_2_35(2)) {
        jj_consume_token(K_OPENPAR);
        precision = jj_consume_token(S_INTEGER);
        jj_consume_token(K_CLOSEPAR);
      } else {
        ;
      }
      break;
    case K_BOOL:
      tk1 = jj_consume_token(K_BOOL);
      break;
    case K_BOOLEAN:
      tk1 = jj_consume_token(K_BOOLEAN);
      break;
    case K_TINYINT:
    case K_SMALLINT:
    case K_MEDIUMINT:
    case K_INT:
    case K_INTEGER:
    case K_BIGINT:
    case K_FLOAT:
    case K_DOUBLE:
    case K_DECIMAL:
    case K_DEC:
    case K_NUMERIC:
    case K_FIXED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TINYINT:
        tk1 = jj_consume_token(K_TINYINT);
        break;
      case K_SMALLINT:
        tk1 = jj_consume_token(K_SMALLINT);
        break;
      case K_MEDIUMINT:
        tk1 = jj_consume_token(K_MEDIUMINT);
        break;
      case K_INT:
        tk1 = jj_consume_token(K_INT);
        break;
      case K_INTEGER:
        tk1 = jj_consume_token(K_INTEGER);
        break;
      case K_BIGINT:
        tk1 = jj_consume_token(K_BIGINT);
        break;
      case K_DOUBLE:
        tk1 = jj_consume_token(K_DOUBLE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_PRECISION:
          tk2 = jj_consume_token(K_PRECISION);
          break;
        default:
          jj_la1[242] = jj_gen;
          ;
        }
        break;
      case K_FLOAT:
        tk1 = jj_consume_token(K_FLOAT);
        break;
      case K_DEC:
        tk1 = jj_consume_token(K_DEC);
        break;
      case K_DECIMAL:
        tk1 = jj_consume_token(K_DECIMAL);
        break;
      case K_NUMERIC:
        tk1 = jj_consume_token(K_NUMERIC);
        break;
      case K_FIXED:
        tk1 = jj_consume_token(K_FIXED);
        break;
      default:
        jj_la1[243] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[244] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_36(2)) {
      jj_consume_token(K_OPENPAR);
      precision = jj_consume_token(S_INTEGER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        jj_consume_token(K_COMMA);
        scale = jj_consume_token(S_INTEGER);
        break;
      default:
        jj_la1[245] = jj_gen;
        ;
      }
      jj_consume_token(K_CLOSEPAR);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_UNSIGNED:
      unsigned = jj_consume_token(K_UNSIGNED);
      break;
    default:
      jj_la1[246] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ZEROFILL:
      zerofill = jj_consume_token(K_ZEROFILL);
      break;
    default:
      jj_la1[247] = jj_gen;
      ;
    }
                type.setDataTypeName(tk2!=null?tk1.image + " " +tk2.image:tk1.image);
                if(unsigned!=null){
                        type.setUnsigned(true);
                }
                if(zerofill!=null){
                        type.setZerofill(true);
                }
                type.setPrecision(precision!=null?Integer.parseInt(precision.image):0);
                type.setScale(scale!=null?Integer.parseInt(scale.image):0);
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public StringDataType stringType() throws ParseException {
        Token charset = null;
        Token collation = null;
        Token tk=null;
        Token tk2=null;
        Token length=null;
        Token value=null;
        StringDataType type=null;
        List values=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CHAR:
    case K_VARCHAR:
    case K_NATIONAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NATIONAL:
        jj_consume_token(K_NATIONAL);
        break;
      default:
        jj_la1[248] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHAR:
        tk = jj_consume_token(K_CHAR);
        break;
      case K_VARCHAR:
        tk = jj_consume_token(K_VARCHAR);
        break;
      default:
        jj_la1[249] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_37(2)) {
        jj_consume_token(K_OPENPAR);
        length = jj_consume_token(S_INTEGER);
        jj_consume_token(K_CLOSEPAR);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BINARY:
        tk2 = jj_consume_token(K_BINARY);
        break;
      default:
        jj_la1[250] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHARACTER:
        jj_consume_token(K_CHARACTER);
        jj_consume_token(K_SET);
        charset = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[251] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLLATE:
        jj_consume_token(K_COLLATE);
        collation = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[252] = jj_gen;
        ;
      }
      break;
    case K_BINARY:
      tk = jj_consume_token(K_BINARY);
      jj_consume_token(K_OPENPAR);
      length = jj_consume_token(S_INTEGER);
      jj_consume_token(K_CLOSEPAR);
      break;
    case K_VARBINARY:
      tk = jj_consume_token(K_VARBINARY);
      jj_consume_token(K_OPENPAR);
      length = jj_consume_token(S_INTEGER);
      jj_consume_token(K_CLOSEPAR);
      break;
    case K_TINYBLOB:
      tk = jj_consume_token(K_TINYBLOB);
      break;
    case K_TINYTEXT:
      tk = jj_consume_token(K_TINYTEXT);
      break;
    case K_BLOB:
      tk = jj_consume_token(K_BLOB);
      jj_consume_token(K_OPENPAR);
      length = jj_consume_token(S_INTEGER);
      jj_consume_token(K_CLOSEPAR);
      break;
    case K_TEXT:
      tk = jj_consume_token(K_TEXT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OPENPAR:
        jj_consume_token(K_OPENPAR);
        length = jj_consume_token(S_INTEGER);
        jj_consume_token(K_CLOSEPAR);
        break;
      default:
        jj_la1[253] = jj_gen;
        ;
      }
      break;
    case K_MEDIUMBLOB:
      tk = jj_consume_token(K_MEDIUMBLOB);
      break;
    case K_MEDIUMTEXT:
      tk = jj_consume_token(K_MEDIUMTEXT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHARACTER:
        jj_consume_token(K_CHARACTER);
        jj_consume_token(K_SET);
        charset = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[254] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLLATE:
        jj_consume_token(K_COLLATE);
        collation = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[255] = jj_gen;
        ;
      }
      break;
    case K_LONGBLOB:
      tk = jj_consume_token(K_LONGBLOB);
      break;
    case K_LONGTEXT:
      tk = jj_consume_token(K_LONGTEXT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHARACTER:
        jj_consume_token(K_CHARACTER);
        jj_consume_token(K_SET);
        charset = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[256] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLLATE:
        jj_consume_token(K_COLLATE);
        collation = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[257] = jj_gen;
        ;
      }
      break;
    case K_ENUM:
      tk = jj_consume_token(K_ENUM);
                 values = new ArrayList();
      jj_consume_token(K_OPENPAR);
      value = jj_consume_token(S_CHAR_LITERAL);
                                            values.add(value.image);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[258] = jj_gen;
          break label_33;
        }
        jj_consume_token(K_COMMA);
        value = jj_consume_token(S_CHAR_LITERAL);
                                                                                                         values.add(value.image);
      }
      jj_consume_token(K_CLOSEPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHARACTER:
        jj_consume_token(K_CHARACTER);
        jj_consume_token(K_SET);
        charset = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[259] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLLATE:
        jj_consume_token(K_COLLATE);
        collation = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[260] = jj_gen;
        ;
      }
      break;
    case K_SET:
      tk = jj_consume_token(K_SET);
                 values = new ArrayList();
      jj_consume_token(K_OPENPAR);
      value = jj_consume_token(S_CHAR_LITERAL);
                                            values.add(value.image);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COMMA:
          ;
          break;
        default:
          jj_la1[261] = jj_gen;
          break label_34;
        }
        jj_consume_token(K_COMMA);
        value = jj_consume_token(S_CHAR_LITERAL);
                                                                                                         values.add(value.image);
      }
      jj_consume_token(K_CLOSEPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CHARACTER:
        jj_consume_token(K_CHARACTER);
        jj_consume_token(K_SET);
        charset = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[262] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COLLATE:
        jj_consume_token(K_COLLATE);
        collation = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[263] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[264] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                type= new StringDataType();
                if(length!=null){
                        type.setLength(Integer.parseInt(length.image));
                }
                type.setDataTypeName(tk2!=null?tk.image+ " " + tk2.image: tk.image);
                type.setCharsetName(charset!=null?charset.image:null);
                type.setCollation(collation!=null?collation.image:null);
                type.setPossibleValues(values!=null?values:null);
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public DateDataType dateType() throws ParseException {
        DateDataType type;
        Token tk=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DATE:
      tk = jj_consume_token(K_DATE);
      break;
    case K_DATETIME:
      tk = jj_consume_token(K_DATETIME);
      break;
    case K_TIMESTAMP:
      tk = jj_consume_token(K_TIMESTAMP);
      break;
    case K_TIME:
      tk = jj_consume_token(K_TIME);
      break;
    case K_YEAR:
      tk = jj_consume_token(K_YEAR);
      break;
    default:
      jj_la1[265] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                type = new DateDataType();
                type.setDataTypeName(tk.image);
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public List columnOption() throws ParseException {
        String option=null;
        Token op1=null;
        Token op2=null;
        Token defaultvalue=null;
        Boolean singleOptionConstraint = false;
        Boolean singleOptionReference = false;
        Boolean singleOptionComment = false;
        Boolean singleOptionNull = false;
        Boolean singleOptionDefault = false;
        Boolean singleOptionAutoIncrement = false;
        List columnSpecs = new ArrayList();
        Table tableReferenced;
        ReferenceDefinition reference;
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_KEY:
      case K_NOT:
      case K_NULL:
      case K_UNIQUE:
      case K_PRIMARY:
      case K_COMMENT:
      case K_DEFAULT:
      case K_REFERENCES:
      case K_AUTO_INCREMENT:
        ;
        break;
      default:
        jj_la1[266] = jj_gen;
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case K_NULL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          op1 = jj_consume_token(K_NOT);
          break;
        default:
          jj_la1[267] = jj_gen;
          ;
        }
        op2 = jj_consume_token(K_NULL);
                                if(singleOptionNull)
                                {
                                        {if (true) throw new ParseException("No more than one NULL/NOT NULL option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                                }
                                else{
                                        option=op1!=null?op1.image + " " + op2.image: op2.image;
                                        columnSpecs.add(option);
                                        singleOptionNull=true;
                                }
        break;
      case K_DEFAULT:
        op1 = jj_consume_token(K_DEFAULT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_CHAR_LITERAL:
          defaultvalue = jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_INTEGER:
          defaultvalue = jj_consume_token(S_INTEGER);
          break;
        case K_NULL:
          defaultvalue = jj_consume_token(K_NULL);
          break;
        default:
          jj_la1[268] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                if(singleOptionDefault)
                                {
                                        {if (true) throw new ParseException("No more than one DEFAULT option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                                }
                                option=op1.image + " " + defaultvalue.image;
                                columnSpecs.add(option);
                                singleOptionDefault = true;
        break;
      case K_AUTO_INCREMENT:
        op1 = jj_consume_token(K_AUTO_INCREMENT);
                        if(singleOptionAutoIncrement)
                        {
                                        {if (true) throw new ParseException("No more than one AUTO_INCREMENT option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                        }
                        option=op1.image;
                        columnSpecs.add(option);
                        singleOptionAutoIncrement = true;
        break;
      case K_COMMENT:
        op1 = jj_consume_token(K_COMMENT);
                        if(singleOptionComment)
                        {
                                        {if (true) throw new ParseException("No more than one COMMENT option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                        }
                        option=op1.image;
                        columnSpecs.add(option);
                        singleOptionComment = true;
        break;
      case K_UNIQUE:
        //CONFLICT TO BE SOLVED
                        //FROM MYSQL MANUAL 5.1
                        //[UNIQUE [KEY] | [PRIMARY] KEY]
                         op1 = jj_consume_token(K_UNIQUE);
        if (jj_2_38(2)) {
          op2 = jj_consume_token(K_KEY);
        } else {
          ;
        }
                        if(singleOptionConstraint){
                                        {if (true) throw new ParseException("No more than one UNIQUE option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                        }
                        singleOptionConstraint = true;
                        option=op2!=null?op1.image + " " + op2.image: op1.image;
                        columnSpecs.add(option);
        break;
      case K_PRIMARY:
        op1 = jj_consume_token(K_PRIMARY);
        op2 = jj_consume_token(K_KEY);
                        if(singleOptionConstraint){
                                        {if (true) throw new ParseException("No more than one PRIMARY KEY option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                        }
                        singleOptionConstraint = true;
                        option=op1.image + " " + op2.image;
                        columnSpecs.add(option);
        break;
      case K_KEY:
        op1 = jj_consume_token(K_KEY);
                        if(singleOptionConstraint){
                                        {if (true) throw new ParseException("No more than one KEY option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                        }
                        singleOptionConstraint = true;
                        option=op1.image;
                        columnSpecs.add(option);
        break;
      case K_REFERENCES:
        reference = referenceDefinition();
                        if(singleOptionReference){
                                        {if (true) throw new ParseException("No more than one REFERENCE option can be present in the column declaration" +
                                                                                        "See the javadoc for the list of option that can be used in the column declaration");}
                        }
                        singleOptionReference = true;
                        columnSpecs.add(reference);
        break;
      default:
        jj_la1[269] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return columnSpecs;}
    throw new Error("Missing return statement in function");
  }

  final public List columnsNamesList() throws ParseException {
        List retval = new ArrayList();
        String tk = null;
    jj_consume_token(K_OPENPAR);
    tk = relObjectName();
                                     retval.add(tk);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[270] = jj_gen;
        break label_36;
      }
      jj_consume_token(K_COMMA);
      tk = relObjectName();
                                                 retval.add(tk);
    }
    jj_consume_token(K_CLOSEPAR);
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Drop dropStatement() throws ParseException {
        Drop stmt;
    jj_consume_token(K_DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INDEX:
    case K_ONLINE:
    case K_OFFLINE:
      stmt = dropIndexStatement();
      break;
    case K_TABLE:
    case K_TEMPORARY:
      stmt = dropTableStatement();
      break;
    default:
      jj_la1[271] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DropTable dropTableStatement() throws ParseException {
        DropTable dropTable = new DropTable();
        Token tk=null;
        List tables = new ArrayList();
        Table table;
        Token op1=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TEMPORARY:
      jj_consume_token(K_TEMPORARY);
      break;
    default:
      jj_la1[272] = jj_gen;
      ;
    }
    jj_consume_token(K_TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IF:
      jj_consume_token(K_IF);
      jj_consume_token(K_EXISTS);
      break;
    default:
      jj_la1[273] = jj_gen;
      ;
    }
    table = table();
                       tables.add(table);
    label_37:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[274] = jj_gen;
        break label_37;
      }
      jj_consume_token(K_COMMA);
      table = table();
                                                                     tables.add(table);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CASCADE:
    case K_RESTRICT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_RESTRICT:
        op1 = jj_consume_token(K_RESTRICT);
        break;
      case K_CASCADE:
        op1 = jj_consume_token(K_CASCADE);
        break;
      default:
        jj_la1[275] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[276] = jj_gen;
      ;
    }
                dropTable.setTables(tables);
                dropTable.setOption(op1!=null?op1.image:null);
                {if (true) return dropTable;}
    throw new Error("Missing return statement in function");
  }

  final public DropIndex dropIndexStatement() throws ParseException {
        DropIndex stmt;
        Token indexName=null;
        Table table=null;
        Index index=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ONLINE:
    case K_OFFLINE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ONLINE:
        jj_consume_token(K_ONLINE);
        break;
      case K_OFFLINE:
        jj_consume_token(K_OFFLINE);
        break;
      default:
        jj_la1[277] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[278] = jj_gen;
      ;
    }
    jj_consume_token(K_INDEX);
    indexName = jj_consume_token(S_IDENTIFIER);
                stmt = new DropIndex();
                index = new Index();
                index.setName(indexName.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
      jj_consume_token(K_ON);
      table = table();
                        stmt.setTable(table);
      break;
    default:
      jj_la1[279] = jj_gen;
      ;
    }
                stmt.setIndex(index);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public Truncate truncate() throws ParseException {
        Truncate truncate = new Truncate();
        Table table;
    jj_consume_token(K_TRUNCATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TABLE:
      jj_consume_token(K_TABLE);
      break;
    default:
      jj_la1[280] = jj_gen;
      ;
    }
    table = table();
                        truncate.setTable(table);
                {if (true) return truncate;}
    throw new Error("Missing return statement in function");
  }

  final public RenameTable renameStatement() throws ParseException {
        RenameTable stmt;
    jj_consume_token(K_RENAME);
    stmt = renameTableStatement();
                                                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public RenameTable renameTableStatement() throws ParseException {
        RenameTable stmt = new RenameTable();
        HashMap<Table, String> tableRenames = new HashMap<Table, String>();
        String newTableName;
        Table table;
    jj_consume_token(K_TABLE);
    table = table();
    jj_consume_token(K_TO);
    newTableName = relObjectName();
                tableRenames.put(table, newTableName);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COMMA:
        ;
        break;
      default:
        jj_la1[281] = jj_gen;
        break label_38;
      }
      jj_consume_token(K_COMMA);
      table = table();
      jj_consume_token(K_TO);
      newTableName = relObjectName();
                                                                       tableRenames.put(table, newTableName);
    }
                stmt.setTableRenames(tableRenames);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_3R_79() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(K_KEY)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_207()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(K_AND)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_230()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(K_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    Token xsp;
    if (jj_3R_227()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_227()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_118()) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(224)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(222)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(223)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(222)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(221)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(222)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(220)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_76()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_scan_token(219)) return true;
    }
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_221()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(218)) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(K_TIMESTAMP)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(K_TIME)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(K_SYMMETRIC)) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(K_DATE)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_154()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(K_FOR)) return true;
    if (jj_scan_token(K_UPDATE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(K_CONCAT)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(219)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(K_DISTINCT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(210)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(K_OFFSET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) return true;
    }
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_74()) return true;
    if (jj_3R_156()) return true;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(211)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(K_LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(K_TOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(K_ASYMMETRIC)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(K_OFFSET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(218)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(K_LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    if (jj_scan_token(K_COMMA)) return true;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) return true;
    }
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) jj_scanpos = xsp;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(K_VERSIONS)) return true;
    if (jj_scan_token(K_BEFORE)) return true;
    if (jj_scan_token(K_SYSTEM)) return true;
    if (jj_scan_token(K_TIME)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(K_VERSIONS)) return true;
    if (jj_scan_token(K_AFTER)) return true;
    if (jj_scan_token(K_SYSTEM)) return true;
    if (jj_scan_token(K_TIME)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(K_VERSIONS)) return true;
    if (jj_scan_token(K_BETWEEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    if (jj_scan_token(K_SYSTEM)) return true;
    if (jj_scan_token(K_TIME)) return true;
    if (jj_3R_171()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_scan_token(K_SYSTEM)) return true;
    if (jj_scan_token(K_TIME)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(K_AS)) return true;
    if (jj_scan_token(K_OF)) return true;
    if (jj_scan_token(K_SYSTEM)) return true;
    if (jj_scan_token(K_TIME)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(K_DESC)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(209)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_239()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_241() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(K_ORDER)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_213()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_214()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(209)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(K_ALL)) return true;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_239()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(203)) {
    jj_scanpos = xsp;
    if (jj_scan_token(207)) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(209)) return true;
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(K_COMMA)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(K_CURRENT_TIME)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(K_INNER)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(K_OUTER)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(K_NATURAL)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(K_FULL)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(K_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(K_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    if (jj_3R_74()) return true;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(S_INTEGER)) return true;
    if (jj_scan_token(219)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    if (jj_scan_token(219)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    if (jj_scan_token(226)) return true;
    if (jj_scan_token(S_INTEGER)) return true;
    if (jj_scan_token(226)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(199)) {
    jj_scanpos = xsp;
    if (jj_scan_token(198)) return true;
    }
    return false;
  }

  private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_209()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(210)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(K_OPENPAR)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_85()) return true;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(209)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(K_OPENPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(K_OPENPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    if (jj_scan_token(K_CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_scan_token(K_COMMA)) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(K_OPENPAR)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(209)) return true;
    if (jj_scan_token(210)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(K_REPLACE)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(209)) return true;
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(216)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) return true;
    }
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(225)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(215)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    if (jj_scan_token(K_OPENPAR)) return true;
    xsp = jj_scanpos;
    if (jj_3R_113()) jj_scanpos = xsp;
    if (jj_scan_token(K_CLOSEPAR)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(222)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(214)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(K_EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(213)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(212)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(210)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CCJSqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[282];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x1000000,0x100000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x600,0x2000,0x0,0x0,0x80000,0x800000,0x800000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x800000,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x800000,0x800000,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x2000,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x14800000,0x10000000,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x10000000,0x0,0x10000000,0x10000000,0x0,0x0,0x4800000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x8000000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x80000,0x0,0x20200000,0x20200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x18000000,0x10000000,0x0,0x18000000,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40080,0x0,0x20800000,0x24000080,0x0,0x0,0x80,0x0,0x400000,0x400000,0x0,0x400000,0x400000,0x0,0x20000000,0x0,0x400000,0x400000,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x1000000,0x80000000,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x10,0x1000000,0x8000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1020,0x0,0x0,0x0,0x0,0x0,0x40020300,0x20200,0x20200,0x40000000,0x40000000,0x100,0x0,0x2000000,0x2000000,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11020,0x0,0x0,0x0,0x1020,0x0,0x1020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x11020,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1020,0x0,0x2000,0x8000,0x2000,0x8000,0x3020,0x0,0x0,0x0,0x0,0x0,0x0,0x1020,0x1020,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x3,0x3,0x0,0x0,0x3,0x3,0x2040000,0x0,0x0,0x0,0x0,0x0,0x20000000,0x24000000,0x0,0x0,0x20000000,0x20000000,0x0,0x2040000,0x20000000,0x0,0x2000000,0x2040000,0x0,0x0,0x2000000,0x2040000,0x0,0x20000000,0x20000000,0x0,0x2000000,0x2040000,0x0,0x20000000,0x20000,0x0,0x0,0x0,0x0,0x0,0x2040000,0x180004,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x24000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x20,0x0,0x20800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x31e0010,0x0,0x100,0x38012,0x0,0x4000,0x0,0x4000,0x8,0x8,0x4000,0x8,0x8,0x18010,0x40004100,0x4000,0x8,0x8,0x0,0x0,0x4000,0x0,0x40004000,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x4100000,0x4100000,0x80,0x0,0x0,0x0,0x0,0x4100000,0x0,0x40,0x80,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x2,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x200000,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x80000005,0x80000004,0x80000004,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000100,0x40000100,0x10000000,0x20,0x0,0x2040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000100,0x0,0x0,0x40000100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x20004001,0x0,0x40100,0xd000410,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20440300,0x0,0x0,0x0,0x80000000,0x20000000,0x0,0x0,0x200,0x80000000,0x80000000,0x0,0x0,0x0,0x80000000,0x80000000,0x80000000,0x20000000,0x20000000,0x0,0x0,0x80000000,0x80000000,0x40000000,0x20000000,0x10000000,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x8000,0x8000,0x0,0x0,0x8000,0x8000,0x0,0x8000,0x8000,0x20000000,0x80000000,0x20000000,0x80000000,0x0,0x0,0x20000001,0x0,0x80000000,0x20000000,0x20000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x20000000,0x0,0x20000000,0x20000001,0x0,0x0,0x0,0x20000001,0x0,0x20000001,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x20000001,0x0,0x20000000,0x0,0x20000000,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x20000001,0x0,0x1,0x0,0x0,0x8000,0x8000,0x20000001,0x20008001,0x0,0x0,0x0,0x40100,0x40100,0x0,0x20000000,0x0,0x0,0x80000000,0x20000000,0x0,0x0,0x4000010,0x0,0x0,0x0,0x0,0x80000000,0x440300,0xd000410,0x20000000,0x40100,0x0,0x0,0x0,0x4000010,0x0,0x0,0x0,0x4000010,0x0,0x400000,0x0,0x4000010,0x0,0x0,0x0,0x0,0x0,0x4000010,0x200,0x440300,0x800,0x0,0x0,0x0,0x3000,0x3000,0x4000010,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x0,0x80000000,0xd000410,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x8800410,0x0,0x0,0x8800410,0x80000000,0x0,0x0,0x0,0x80000000,0x3000,0x3000,0x0,0x0,0x0,0x0,0x80000000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x7e000000,0x1807f7c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x800010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x800010,0x800010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x800010,0x0,0x0,0x0,0x800010,0x800010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x1,0x800010,0x0,0x800010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800010,0x0,0x800010,0x0,0x0,0x0,0x0,0x800010,0x800010,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x18000000,0x60000000,0x78000000,0x0,0x800010,0x1807f7c,0x0,0x0,0x0,0x0,0x800010,0x0,0x0,0x800010,0x0,0x0,0x800010,0x0,0x0,0x0,0x800010,0x0,0x0,0x800010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800004,0x1,0x1,0x1,0x0,0x1000000,0x1,0x1,0x1000000,0x1,0x1,0x1,0x1,0x100000,0x0,0x78000,0x600000,0x80000,0x0,0x1807f7c,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x26000000,0x20000000,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x78000,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x78000,0x0,0x0,0x0,0x78000,0x0,0x78000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x78000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x68000,0x0,0x0,0x0,0x0,0x78000,0x0,0x10000,0x0,0x0,0x0,0x0,0x78000,0x78000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0xfffffbff,0x0,0x0,0x400,0x7bf9,0x7bff,0x0,0x0,0x0,0x0,0x300000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfff00000,0xf8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x10000,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8800,0x0,0x0,0x0,0x0,0x8800,0x0,0x0,0x8800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8800,0x0,0x0,0x0,0x0,0x20000,0x20000,0x8800,0x0,0x8800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8800,0x40000,0xac08c8c0,0x0,0x0,0x0,0x8800,0x8800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80080,0x80080,0x80080,0x80080,0x80080,0x0,0x0,0x80080,0x8880,0x0,0x0,0x0,0x0,0x0,0xac08c8c0,0x0,0x3000000,0x3f00000,0xac08c8c0,0x0,0xac08c8c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xac08c8c0,0x0,0x0,0xc000000,0x0,0x10040000,0x0,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0x80000,0xac004000,0x0,0x0,0x0,0x0,0xac08c8c0,0x0,0x8800,0x20000,0x20000,0x0,0x0,0xac0cc8c0,0xac0cc8c0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8800,0x30,0x0,0x0,0x0,0x0,0x8800,0x0,0x0,0x8800,0x0,0x0,0x8800,0x0,0x0,0x0,0x8800,0x0,0x0,0x8800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x30,0x9,0xc0,0x80,0x0,0x0,0x0,0x0,0x2,0x4,0x8,0x0,0x0,0x10,0x20,0x0,0x10,0x20,0x10,0x20,0x0,0x10,0x20,0x0,0x10,0x20,0x9,0x0,0x0,0x0,0x4080,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x3,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x3,0x2,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[38];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CCJSqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CCJSqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CCJSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 282; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 282; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CCJSqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CCJSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 282; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 282; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CCJSqlParser(CCJSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 282; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CCJSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 282; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[227];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 282; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 227; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 38; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
