/* Generated By:JavaCC: Do not edit this line. CCJSqlParserConstants.java */
/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package com.relationalcloud.tsqlparser.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CCJSqlParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int K_OF = 5;
  /** RegularExpression Id. */
  int K_VERSIONS = 6;
  /** RegularExpression Id. */
  int K_BEFORE = 7;
  /** RegularExpression Id. */
  int K_SYSTEM = 8;
  /** RegularExpression Id. */
  int K_ASYMMETRIC = 9;
  /** RegularExpression Id. */
  int K_SYMMETRIC = 10;
  /** RegularExpression Id. */
  int K_CURRENT_TIME = 11;
  /** RegularExpression Id. */
  int K_FOR = 12;
  /** RegularExpression Id. */
  int K_AS = 13;
  /** RegularExpression Id. */
  int K_BY = 14;
  /** RegularExpression Id. */
  int K_DO = 15;
  /** RegularExpression Id. */
  int K_IS = 16;
  /** RegularExpression Id. */
  int K_IN = 17;
  /** RegularExpression Id. */
  int K_OR = 18;
  /** RegularExpression Id. */
  int K_ON = 19;
  /** RegularExpression Id. */
  int K_TO = 20;
  /** RegularExpression Id. */
  int K_NO = 21;
  /** RegularExpression Id. */
  int K_IF = 22;
  /** RegularExpression Id. */
  int K_ALL = 23;
  /** RegularExpression Id. */
  int K_ADD = 24;
  /** RegularExpression Id. */
  int K_AND = 25;
  /** RegularExpression Id. */
  int K_ANY = 26;
  /** RegularExpression Id. */
  int K_KEY = 27;
  /** RegularExpression Id. */
  int K_NOT = 28;
  /** RegularExpression Id. */
  int K_SET = 29;
  /** RegularExpression Id. */
  int K_TOP = 30;
  /** RegularExpression Id. */
  int K_END = 31;
  /** RegularExpression Id. */
  int K_ASC = 32;
  /** RegularExpression Id. */
  int K_DESC = 33;
  /** RegularExpression Id. */
  int K_HASH = 34;
  /** RegularExpression Id. */
  int K_KEYS = 35;
  /** RegularExpression Id. */
  int K_INTO = 36;
  /** RegularExpression Id. */
  int K_NULL = 37;
  /** RegularExpression Id. */
  int K_LIKE = 38;
  /** RegularExpression Id. */
  int K_DROP = 39;
  /** RegularExpression Id. */
  int K_JOIN = 40;
  /** RegularExpression Id. */
  int K_LEFT = 41;
  /** RegularExpression Id. */
  int K_FROM = 42;
  /** RegularExpression Id. */
  int K_OPEN = 43;
  /** RegularExpression Id. */
  int K_CASE = 44;
  /** RegularExpression Id. */
  int K_WHEN = 45;
  /** RegularExpression Id. */
  int K_THEN = 46;
  /** RegularExpression Id. */
  int K_ELSE = 47;
  /** RegularExpression Id. */
  int K_SOME = 48;
  /** RegularExpression Id. */
  int K_FULL = 49;
  /** RegularExpression Id. */
  int K_WITH = 50;
  /** RegularExpression Id. */
  int K_BTREE = 51;
  /** RegularExpression Id. */
  int K_RTREE = 52;
  /** RegularExpression Id. */
  int K_CHECK = 53;
  /** RegularExpression Id. */
  int K_FIRST = 54;
  /** RegularExpression Id. */
  int K_TABLE = 55;
  /** RegularExpression Id. */
  int K_WHERE = 56;
  /** RegularExpression Id. */
  int K_USING = 57;
  /** RegularExpression Id. */
  int K_UNION = 58;
  /** RegularExpression Id. */
  int K_GROUP = 59;
  /** RegularExpression Id. */
  int K_BEGIN = 60;
  /** RegularExpression Id. */
  int K_INDEX = 61;
  /** RegularExpression Id. */
  int K_INNER = 62;
  /** RegularExpression Id. */
  int K_LIMIT = 63;
  /** RegularExpression Id. */
  int K_OUTER = 64;
  /** RegularExpression Id. */
  int K_ORDER = 65;
  /** RegularExpression Id. */
  int K_RIGHT = 66;
  /** RegularExpression Id. */
  int K_AFTER = 67;
  /** RegularExpression Id. */
  int K_ALTER = 68;
  /** RegularExpression Id. */
  int K_MATCH = 69;
  /** RegularExpression Id. */
  int K_QUICK = 70;
  /** RegularExpression Id. */
  int K_IGNORE = 71;
  /** RegularExpression Id. */
  int K_UNIQUE = 72;
  /** RegularExpression Id. */
  int K_REPAIR = 73;
  /** RegularExpression Id. */
  int K_REMOVE = 74;
  /** RegularExpression Id. */
  int K_PARSER = 75;
  /** RegularExpression Id. */
  int K_ENABLE = 76;
  /** RegularExpression Id. */
  int K_IMPORT = 77;
  /** RegularExpression Id. */
  int K_COLUMN = 78;
  /** RegularExpression Id. */
  int K_MODIFY = 79;
  /** RegularExpression Id. */
  int K_CHANGE = 80;
  /** RegularExpression Id. */
  int K_RENAME = 81;
  /** RegularExpression Id. */
  int K_DELETE = 82;
  /** RegularExpression Id. */
  int K_CREATE = 83;
  /** RegularExpression Id. */
  int K_SELECT = 84;
  /** RegularExpression Id. */
  int K_OFFSET = 85;
  /** RegularExpression Id. */
  int K_EXISTS = 86;
  /** RegularExpression Id. */
  int K_HAVING = 87;
  /** RegularExpression Id. */
  int K_INSERT = 88;
  /** RegularExpression Id. */
  int K_UPDATE = 89;
  /** RegularExpression Id. */
  int K_VALUES = 90;
  /** RegularExpression Id. */
  int K_ESCAPE = 91;
  /** RegularExpression Id. */
  int K_SIMPLE = 92;
  /** RegularExpression Id. */
  int K_ACTION = 93;
  /** RegularExpression Id. */
  int K_PRIMARY = 94;
  /** RegularExpression Id. */
  int K_NATURAL = 95;
  /** RegularExpression Id. */
  int K_REPLACE = 96;
  /** RegularExpression Id. */
  int K_BETWEEN = 97;
  /** RegularExpression Id. */
  int K_REBUILD = 98;
  /** RegularExpression Id. */
  int K_ANALYZE = 99;
  /** RegularExpression Id. */
  int K_COMMENT = 100;
  /** RegularExpression Id. */
  int K_DISABLE = 101;
  /** RegularExpression Id. */
  int K_CONVERT = 102;
  /** RegularExpression Id. */
  int K_DISCARD = 103;
  /** RegularExpression Id. */
  int K_SPATIAL = 104;
  /** RegularExpression Id. */
  int K_FOREIGN = 105;
  /** RegularExpression Id. */
  int K_DEFAULT = 106;
  /** RegularExpression Id. */
  int K_PARTIAL = 107;
  /** RegularExpression Id. */
  int K_CASCADE = 108;
  /** RegularExpression Id. */
  int K_RESTRICT = 109;
  /** RegularExpression Id. */
  int K_TRUNCATE = 110;
  /** RegularExpression Id. */
  int K_DISTINCT = 111;
  /** RegularExpression Id. */
  int K_COALESCE = 112;
  /** RegularExpression Id. */
  int K_OPTIMIZE = 113;
  /** RegularExpression Id. */
  int K_FULLTEXT = 114;
  /** RegularExpression Id. */
  int K_INTERSECT = 115;
  /** RegularExpression Id. */
  int K_PARTITION = 116;
  /** RegularExpression Id. */
  int K_REORGANIZE = 117;
  /** RegularExpression Id. */
  int K_CONSTRAINT = 118;
  /** RegularExpression Id. */
  int K_REFERENCES = 119;
  /** RegularExpression Id. */
  int K_TABLESPACE = 120;
  /** RegularExpression Id. */
  int K_PARTITIONING = 121;
  /** RegularExpression Id. */
  int K_KEY_BLOCK_SIZE = 122;
  /** RegularExpression Id. */
  int K_AUTO_INCREMENT = 123;
  /** RegularExpression Id. */
  int K_LOW_PRIORITY = 124;
  /** RegularExpression Id. */
  int K_OPENPAR = 125;
  /** RegularExpression Id. */
  int K_CLOSEPAR = 126;
  /** RegularExpression Id. */
  int K_COMMA = 127;
  /** RegularExpression Id. */
  int K_EQUALS = 128;
  /** RegularExpression Id. */
  int K_CONCAT = 129;
  /** RegularExpression Id. */
  int K_ENGINE = 130;
  /** RegularExpression Id. */
  int K_AVG_ROW_LENGTH = 131;
  /** RegularExpression Id. */
  int K_CHECKSUM = 132;
  /** RegularExpression Id. */
  int K_CONNECTION = 133;
  /** RegularExpression Id. */
  int K_DATA = 134;
  /** RegularExpression Id. */
  int K_DIRECTORY = 135;
  /** RegularExpression Id. */
  int K_DELAY_KEY_WRITE = 136;
  /** RegularExpression Id. */
  int K_INSERT_METHOD = 137;
  /** RegularExpression Id. */
  int K_MAX_ROWS = 138;
  /** RegularExpression Id. */
  int K_MIN_ROWS = 139;
  /** RegularExpression Id. */
  int K_PACK_KEYS = 140;
  /** RegularExpression Id. */
  int K_PASSWORD = 141;
  /** RegularExpression Id. */
  int K_ROW_FORMAT = 142;
  /** RegularExpression Id. */
  int K_DYNAMIC = 143;
  /** RegularExpression Id. */
  int K_COMPRESSED = 144;
  /** RegularExpression Id. */
  int K_REDUNDANT = 145;
  /** RegularExpression Id. */
  int K_COMPACT = 146;
  /** RegularExpression Id. */
  int K_STORAGE = 147;
  /** RegularExpression Id. */
  int K_LAST = 148;
  /** RegularExpression Id. */
  int K_DISK = 149;
  /** RegularExpression Id. */
  int K_MEMORY = 150;
  /** RegularExpression Id. */
  int K_TYPE = 151;
  /** RegularExpression Id. */
  int K_CHARSET = 152;
  /** RegularExpression Id. */
  int K_ONLINE = 153;
  /** RegularExpression Id. */
  int K_OFFLINE = 154;
  /** RegularExpression Id. */
  int K_GLOBAL = 155;
  /** RegularExpression Id. */
  int K_LOCAL = 156;
  /** RegularExpression Id. */
  int K_TEMPORARY = 157;
  /** RegularExpression Id. */
  int K_TEMP = 158;
  /** RegularExpression Id. */
  int K_BIT = 159;
  /** RegularExpression Id. */
  int K_TINYINT = 160;
  /** RegularExpression Id. */
  int K_BOOL = 161;
  /** RegularExpression Id. */
  int K_BOOLEAN = 162;
  /** RegularExpression Id. */
  int K_SMALLINT = 163;
  /** RegularExpression Id. */
  int K_MEDIUMINT = 164;
  /** RegularExpression Id. */
  int K_INT = 165;
  /** RegularExpression Id. */
  int K_INTEGER = 166;
  /** RegularExpression Id. */
  int K_BIGINT = 167;
  /** RegularExpression Id. */
  int K_FLOAT = 168;
  /** RegularExpression Id. */
  int K_DOUBLE = 169;
  /** RegularExpression Id. */
  int K_PRECISION = 170;
  /** RegularExpression Id. */
  int K_DECIMAL = 171;
  /** RegularExpression Id. */
  int K_DEC = 172;
  /** RegularExpression Id. */
  int K_NUMERIC = 173;
  /** RegularExpression Id. */
  int K_FIXED = 174;
  /** RegularExpression Id. */
  int K_DATE = 175;
  /** RegularExpression Id. */
  int K_DATETIME = 176;
  /** RegularExpression Id. */
  int K_TIMESTAMP = 177;
  /** RegularExpression Id. */
  int K_TIME = 178;
  /** RegularExpression Id. */
  int K_YEAR = 179;
  /** RegularExpression Id. */
  int K_CHAR = 180;
  /** RegularExpression Id. */
  int K_VARCHAR = 181;
  /** RegularExpression Id. */
  int K_BINARY = 182;
  /** RegularExpression Id. */
  int K_VARBINARY = 183;
  /** RegularExpression Id. */
  int K_TINYBLOB = 184;
  /** RegularExpression Id. */
  int K_TINYTEXT = 185;
  /** RegularExpression Id. */
  int K_BLOB = 186;
  /** RegularExpression Id. */
  int K_TEXT = 187;
  /** RegularExpression Id. */
  int K_MEDIUMBLOB = 188;
  /** RegularExpression Id. */
  int K_MEDIUMTEXT = 189;
  /** RegularExpression Id. */
  int K_LONGBLOB = 190;
  /** RegularExpression Id. */
  int K_LONGTEXT = 191;
  /** RegularExpression Id. */
  int K_ENUM = 192;
  /** RegularExpression Id. */
  int K_UNSIGNED = 193;
  /** RegularExpression Id. */
  int K_ZEROFILL = 194;
  /** RegularExpression Id. */
  int K_NATIONAL = 195;
  /** RegularExpression Id. */
  int K_CHARACTER = 196;
  /** RegularExpression Id. */
  int K_COLLATE = 197;
  /** RegularExpression Id. */
  int S_DOUBLE = 198;
  /** RegularExpression Id. */
  int S_INTEGER = 199;
  /** RegularExpression Id. */
  int DIGIT = 200;
  /** RegularExpression Id. */
  int LINE_COMMENT = 201;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 202;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 203;
  /** RegularExpression Id. */
  int LETTER = 204;
  /** RegularExpression Id. */
  int SPECIAL_CHARS = 205;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 206;
  /** RegularExpression Id. */
  int S_OBJECT_NAME = 207;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"OF\"",
    "\"VERSIONS\"",
    "\"BEFORE\"",
    "\"SYSTEM\"",
    "\"ASYMMETRIC\"",
    "\"SYMMETRIC\"",
    "\"CURRENT_TIME\"",
    "\"FOR\"",
    "\"AS\"",
    "\"BY\"",
    "\"DO\"",
    "\"IS\"",
    "\"IN\"",
    "\"OR\"",
    "\"ON\"",
    "\"TO\"",
    "\"NO\"",
    "\"IF\"",
    "\"ALL\"",
    "\"ADD\"",
    "\"AND\"",
    "\"ANY\"",
    "\"KEY\"",
    "\"NOT\"",
    "\"SET\"",
    "\"TOP\"",
    "\"END\"",
    "\"ASC\"",
    "\"DESC\"",
    "\"HASH\"",
    "\"KEYS\"",
    "\"INTO\"",
    "\"NULL\"",
    "\"LIKE\"",
    "\"DROP\"",
    "\"JOIN\"",
    "\"LEFT\"",
    "\"FROM\"",
    "\"OPEN\"",
    "\"CASE\"",
    "\"WHEN\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"SOME\"",
    "\"FULL\"",
    "\"WITH\"",
    "\"BTREE\"",
    "\"RTREE\"",
    "\"CHECK\"",
    "\"FIRST\"",
    "\"TABLE\"",
    "\"WHERE\"",
    "\"USING\"",
    "\"UNION\"",
    "\"GROUP\"",
    "\"BEGIN\"",
    "\"INDEX\"",
    "\"INNER\"",
    "\"LIMIT\"",
    "\"OUTER\"",
    "\"ORDER\"",
    "\"RIGHT\"",
    "\"AFTER\"",
    "\"ALTER\"",
    "\"MATCH\"",
    "\"QUICK\"",
    "\"IGNORE\"",
    "\"UNIQUE\"",
    "\"REPAIR\"",
    "\"REMOVE\"",
    "\"PARSER\"",
    "\"ENABLE\"",
    "\"IMPORT\"",
    "\"COLUMN\"",
    "\"MODIFY\"",
    "\"CHANGE\"",
    "\"RENAME\"",
    "\"DELETE\"",
    "\"CREATE\"",
    "\"SELECT\"",
    "\"OFFSET\"",
    "\"EXISTS\"",
    "\"HAVING\"",
    "\"INSERT\"",
    "\"UPDATE\"",
    "\"VALUES\"",
    "\"ESCAPE\"",
    "\"SIMPLE\"",
    "\"ACTION\"",
    "\"PRIMARY\"",
    "\"NATURAL\"",
    "\"REPLACE\"",
    "\"BETWEEN\"",
    "\"REBUILD\"",
    "\"ANALYZE\"",
    "\"COMMENT\"",
    "\"DISABLE\"",
    "\"CONVERT\"",
    "\"DISCARD\"",
    "\"SPATIAL\"",
    "\"FOREIGN\"",
    "\"DEFAULT\"",
    "\"PARTIAL\"",
    "\"CASCADE\"",
    "\"RESTRICT\"",
    "\"TRUNCATE\"",
    "\"DISTINCT\"",
    "\"COALESCE\"",
    "\"OPTIMIZE\"",
    "\"FULLTEXT\"",
    "\"INTERSECT\"",
    "\"PARTITION\"",
    "\"REORGANIZE\"",
    "\"CONSTRAINT\"",
    "\"REFERENCES\"",
    "\"TABLESPACE\"",
    "\"PARTITIONING\"",
    "\"KEY_BLOCK_SIZE\"",
    "\"AUTO_INCREMENT\"",
    "\"LOW_PRIORITY\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"=\"",
    "\"||\"",
    "\"ENGINE\"",
    "\"AVG_ROW_LENGTH\"",
    "\"CHECKSUM\"",
    "\"CONNECTION\"",
    "\"DATA\"",
    "\"DIRECTORY\"",
    "\"DELAY_KEY_WRITE\"",
    "\"INSERT_METHOD\"",
    "\"MAX_ROWS\"",
    "\"MIN_ROWS\"",
    "\"PACK_KEYS\"",
    "\"PASSWORD\"",
    "\"ROW_FORMAT\"",
    "\"DYNAMIC\"",
    "\"COMPRESSED\"",
    "\"REDUNDANT\"",
    "\"COMPACT\"",
    "\"STORAGE\"",
    "\"LAST\"",
    "\"DISK\"",
    "\"MEMORY\"",
    "\"TYPE\"",
    "\"CHARSET\"",
    "\"ONLINE\"",
    "\"OFFLINE\"",
    "\"GLOBAL\"",
    "\"LOCAL\"",
    "\"TEMPORARY\"",
    "\"TEMP\"",
    "\"BIT\"",
    "\"TINYINT\"",
    "\"BOOL\"",
    "\"BOOLEAN\"",
    "\"SMALLINT\"",
    "\"MEDIUMINT\"",
    "\"INT\"",
    "\"INTEGER\"",
    "\"BIGINT\"",
    "\"FLOAT\"",
    "\"DOUBLE\"",
    "\"PRECISION\"",
    "\"DECIMAL\"",
    "\"DEC\"",
    "\"NUMERIC\"",
    "\"FIXED\"",
    "\"DATE\"",
    "\"DATETIME\"",
    "\"TIMESTAMP\"",
    "\"TIME\"",
    "\"YEAR\"",
    "\"CHAR\"",
    "\"VARCHAR\"",
    "\"BINARY\"",
    "\"VARBINARY\"",
    "\"TINYBLOB\"",
    "\"TINYTEXT\"",
    "\"BLOB\"",
    "\"TEXT\"",
    "\"MEDIUMBLOB\"",
    "\"MEDIUMTEXT\"",
    "\"LONGBLOB\"",
    "\"LONGTEXT\"",
    "\"ENUM\"",
    "\"UNSIGNED\"",
    "\"ZEROFILL\"",
    "\"NATIONAL\"",
    "\"CHARACTER\"",
    "\"COLLATE\"",
    "<S_DOUBLE>",
    "<S_INTEGER>",
    "<DIGIT>",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<SPECIAL_CHARS>",
    "<S_CHAR_LITERAL>",
    "<S_OBJECT_NAME>",
    "\";\"",
    "\".\"",
    "\"*\"",
    "\"?\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"<>\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"{d\"",
    "\"}\"",
    "\"{t\"",
    "\"{ts\"",
    "\"{fn\"",
    "\":\"",
  };

}
