/* Generated By:JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
/* ================================================================
 * JSQLParser : java based sql parser 
 * ================================================================
 *
 * Project Info:  http://jsqlparser.sourceforge.net
 * Project Lead:  Leonardo Francalanci (leoonardoo@yahoo.it);
 *
 * (C) Copyright 2004, by Leonardo Francalanci
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License as published by the Free Software Foundation;
 * either version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package com.relationalcloud.tsqlparser.parser;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import com.relationalcloud.tsqlparser.expression.AllComparisonExpression;
import com.relationalcloud.tsqlparser.expression.AnyComparisonExpression;
import com.relationalcloud.tsqlparser.expression.BinaryExpression;
import com.relationalcloud.tsqlparser.expression.CaseExpression;
import com.relationalcloud.tsqlparser.expression.DateValue;
import com.relationalcloud.tsqlparser.expression.DoubleValue;
import com.relationalcloud.tsqlparser.expression.Expression;
import com.relationalcloud.tsqlparser.expression.Function;
import com.relationalcloud.tsqlparser.expression.InverseExpression;
import com.relationalcloud.tsqlparser.expression.JdbcParameter;
import com.relationalcloud.tsqlparser.expression.LongValue;
import com.relationalcloud.tsqlparser.expression.NullValue;
import com.relationalcloud.tsqlparser.expression.Parenthesis;
import com.relationalcloud.tsqlparser.expression.StringValue;
import com.relationalcloud.tsqlparser.expression.TimeValue;
import com.relationalcloud.tsqlparser.expression.TimestampValue;
import com.relationalcloud.tsqlparser.expression.WhenClause;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Addition;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Division;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Multiplication;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Subtraction;
import com.relationalcloud.tsqlparser.expression.operators.conditional.AndExpression;
import com.relationalcloud.tsqlparser.expression.operators.conditional.OrExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.Between;
import com.relationalcloud.tsqlparser.expression.operators.relational.EqualsTo;
import com.relationalcloud.tsqlparser.expression.operators.relational.ExistsExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.ExpressionList;
import com.relationalcloud.tsqlparser.expression.operators.relational.GreaterThan;
import com.relationalcloud.tsqlparser.expression.operators.relational.GreaterThanEquals;
import com.relationalcloud.tsqlparser.expression.operators.relational.InExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.IsNullExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.ItemsList;
import com.relationalcloud.tsqlparser.expression.operators.relational.LikeExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.Concatenation;
import com.relationalcloud.tsqlparser.expression.operators.relational.MinorThan;
import com.relationalcloud.tsqlparser.expression.operators.relational.MinorThanEquals;
import com.relationalcloud.tsqlparser.expression.operators.relational.NotEqualsTo;
import com.relationalcloud.tsqlparser.schema.ForeignKey;
import com.relationalcloud.tsqlparser.schema.Column;
import com.relationalcloud.tsqlparser.schema.Index;
import com.relationalcloud.tsqlparser.schema.ReferenceDefinition;
import com.relationalcloud.tsqlparser.schema.Table;
import com.relationalcloud.tsqlparser.schema.datatypes.*;
import com.relationalcloud.tsqlparser.statement.Statement;
import com.relationalcloud.tsqlparser.statement.alter.table.*;
import com.relationalcloud.tsqlparser.statement.create.index.CreateIndex;
import com.relationalcloud.tsqlparser.statement.create.table.ColumnDefinition;
import com.relationalcloud.tsqlparser.statement.create.table.CreateTable;
import com.relationalcloud.tsqlparser.statement.delete.Delete;
import com.relationalcloud.tsqlparser.statement.drop.*;
import com.relationalcloud.tsqlparser.statement.insert.Insert;
import com.relationalcloud.tsqlparser.statement.rename.RenameTable;
import com.relationalcloud.tsqlparser.statement.replace.Replace;
import com.relationalcloud.tsqlparser.statement.select.AllColumns;
import com.relationalcloud.tsqlparser.statement.select.AllTableColumns;
import com.relationalcloud.tsqlparser.statement.select.ColumnIndex;
import com.relationalcloud.tsqlparser.statement.select.ColumnReference;
import com.relationalcloud.tsqlparser.statement.select.Distinct;
import com.relationalcloud.tsqlparser.statement.select.FromItem;
import com.relationalcloud.tsqlparser.statement.select.Join;
import com.relationalcloud.tsqlparser.statement.select.Limit;
import com.relationalcloud.tsqlparser.statement.select.OrderByElement;
import com.relationalcloud.tsqlparser.statement.select.PlainSelect;
import com.relationalcloud.tsqlparser.statement.select.Select;
import com.relationalcloud.tsqlparser.statement.select.SelectBody;
import com.relationalcloud.tsqlparser.statement.select.SelectExpressionItem;
import com.relationalcloud.tsqlparser.statement.select.SelectItem;
import com.relationalcloud.tsqlparser.statement.select.SubJoin;
import com.relationalcloud.tsqlparser.statement.select.SubSelect;
import com.relationalcloud.tsqlparser.statement.select.Top;
import com.relationalcloud.tsqlparser.statement.select.Union;
import com.relationalcloud.tsqlparser.statement.select.WithItem;
import com.relationalcloud.tsqlparser.statement.truncate.Truncate;
import com.relationalcloud.tsqlparser.statement.update.Update;

/** Token Manager. */
public class CCJSqlParserTokenManager implements CCJSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x1fffffffffffffffL) != 0L || (active2 & 0xfffffffffffffffcL) != 0L || (active3 & 0x3fL) != 0L)
         {
            jjmatchedKind = 203;
            return 40;
         }
         if ((active3 & 0x10000000L) != 0L)
            return 8;
         if ((active3 & 0x20000L) != 0L)
            return 1;
         if ((active3 & 0x8000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x9fffffeeaf801dc0L) != 0L || (active1 & 0x1ff7fffffedffffdL) != 0L || (active2 & 0xfffffd9ff9fffdfcL) != 0L || (active3 & 0x3fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active0 & 0x60000011507fe220L) != 0L || (active1 & 0x8000001200002L) != 0L || (active2 & 0x26006000200L) != 0L)
            return 40;
         return -1;
      case 2:
         if ((active0 & 0xffffffe600000fc0L) != 0L || (active1 & 0x1bf7fdffffffffffL) != 0L || (active2 & 0xffffe79f7ffffffcL) != 0L || (active3 & 0x3fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 2;
            }
            return 40;
         }
         if ((active0 & 0x19ff801000L) != 0L || (active1 & 0x408020000000000L) != 0L || (active2 & 0x186080000000L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0xfff8000000000fc0L) != 0L || (active1 & 0xbfbffffffffffffL) != 0L || (active2 & 0xf3e06fd91e4fb3b4L) != 0L || (active3 & 0x2eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 3;
            }
            return 40;
         }
         if ((active1 & 0x1400000000000000L) != 0L || (active2 & 0x4c08L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 3;
            }
            return 16;
         }
         if ((active0 & 0x7fffe00000000L) != 0L || (active1 & 0x4000000000000L) != 0L || (active2 & 0xc1f800661b00040L) != 0L || (active3 & 0x11L) != 0L)
            return 40;
         return -1;
      case 4:
         if ((active0 & 0xfff8000000000000L) != 0L || (active1 & 0x10000000000007fL) != 0L || (active2 & 0x410010000010L) != 0L)
            return 40;
         if ((active0 & 0xfc0L) != 0L || (active1 & 0x2ffffffffffff80L) != 0L || (active2 & 0xf3e32edd2f4fa3a4L) != 0L || (active3 & 0x3eL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 4;
            }
            return 40;
         }
         if ((active1 & 0x1c00000000000000L) != 0L || (active2 & 0x5c08L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 4;
            }
            return 16;
         }
         return -1;
      case 5:
         if ((active1 & 0x1c00000000000000L) != 0L || (active2 & 0x5d08L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 5;
            }
            return 16;
         }
         if ((active0 & 0xe40L) != 0L || (active1 & 0x3ffffffc0000000L) != 0L || (active2 & 0xf3a32c5d250fa0b0L) != 0L || (active3 & 0x3eL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 5;
            }
            return 40;
         }
         if ((active0 & 0x180L) != 0L || (active1 & 0x3fffff80L) != 0L || (active2 & 0x4002800a400204L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0xe40L) != 0L || (active1 & 0x3ffe00000000000L) != 0L || (active2 & 0xf3830418200320b0L) != 0L || (active3 & 0x1eL) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 6;
            return 40;
         }
         if ((active1 & 0x1c00000000000000L) != 0L || (active2 & 0x5f08L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 6;
            return 16;
         }
         if ((active1 & 0x1fffc0000000L) != 0L || (active2 & 0x202845050c8000L) != 0L || (active3 & 0x20L) != 0L)
            return 40;
         return -1;
      case 7:
         if ((active0 & 0x600L) != 0L || (active1 & 0x3f8000000000000L) != 0L || (active2 & 0x30820410200300a0L) != 0L || (active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active2 & 0xc00L) != 0L)
            return 16;
         if ((active0 & 0x40L) != 0L || (active1 & 0x7e00000000000L) != 0L || (active2 & 0xc301000800002010L) != 0L || (active3 & 0xeL) != 0L)
            return 40;
         if ((active0 & 0x800L) != 0L || (active1 & 0x1c00000000000000L) != 0L || (active2 & 0x5308L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 7;
            return 16;
         }
         return -1;
      case 8:
         if ((active0 & 0x800L) != 0L || (active1 & 0x1c00000000000000L) != 0L || (active2 & 0x4308L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 8;
            }
            return 16;
         }
         if ((active2 & 0x1000L) != 0L)
            return 16;
         if ((active0 & 0x200L) != 0L || (active1 & 0x1e0000000000000L) != 0L || (active2 & 0x3000000000010020L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 203;
               jjmatchedPos = 8;
            }
            return 40;
         }
         if ((active0 & 0x400L) != 0L || (active1 & 0x218000000000000L) != 0L || (active2 & 0x82041020020080L) != 0L || (active3 & 0x10L) != 0L)
            return 40;
         return -1;
      case 9:
         if ((active2 & 0x4000L) != 0L)
            return 16;
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 9;
            return 40;
         }
         if ((active0 & 0x800L) != 0L || (active1 & 0x1c00000000000000L) != 0L || (active2 & 0x308L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 9;
            return 16;
         }
         if ((active0 & 0x200L) != 0L || (active1 & 0x1e0000000000000L) != 0L || (active2 & 0x3000000000010020L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x800L) != 0L || (active1 & 0x1c00000000000000L) != 0L || (active2 & 0x308L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 10;
            return 16;
         }
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 10;
            return 40;
         }
         return -1;
      case 11:
         if ((active0 & 0x800L) != 0L || (active1 & 0x1000000000000000L) != 0L)
            return 16;
         if ((active1 & 0xc00000000000000L) != 0L || (active2 & 0x308L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 11;
            return 16;
         }
         if ((active1 & 0x200000000000000L) != 0L)
            return 40;
         return -1;
      case 12:
         if ((active1 & 0xc00000000000000L) != 0L || (active2 & 0x108L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 12;
            return 16;
         }
         if ((active2 & 0x200L) != 0L)
            return 16;
         return -1;
      case 13:
         if ((active1 & 0xc00000000000000L) != 0L || (active2 & 0x8L) != 0L)
            return 16;
         if ((active2 & 0x100L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 13;
            return 16;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x2000000L);
      case 40:
         return jjStopAtPos(0, 125);
      case 41:
         return jjStopAtPos(0, 126);
      case 42:
         return jjStopAtPos(0, 210);
      case 43:
         return jjStopAtPos(0, 218);
      case 44:
         return jjStopAtPos(0, 127);
      case 45:
         return jjStartNfaWithStates_0(0, 219, 5);
      case 46:
         return jjStartNfaWithStates_0(0, 209, 1);
      case 47:
         return jjStartNfaWithStates_0(0, 220, 8);
      case 58:
         return jjStopAtPos(0, 226);
      case 59:
         return jjStopAtPos(0, 208);
      case 60:
         jjmatchedKind = 213;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1800000L);
      case 61:
         return jjStopAtPos(0, 128);
      case 62:
         jjmatchedKind = 212;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000L);
      case 63:
         return jjStopAtPos(0, 211);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x107802200L, 0x800000820000018L, 0x8L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1008000000004080L, 0x200000000L, 0x440008680000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20100000000800L, 0x41105000094000L, 0x10000001050030L, 0x30L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8200008000L, 0x84a000040000L, 0x19a00002081c0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800080000000L, 0x8401000L, 0x4L, 0x1L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x42040000001000L, 0x4020000000000L, 0x410000000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x8000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x800000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x6000001000430000L, 0x8000001002080L, 0x6000000200L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x808000000L, 0x400000000000000L, 0x0L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000024000000000L, 0x1000000000000000L, 0xc000000010100000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8020L, 0x3000001000400c00L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2010200000L, 0x80000000L, 0x200000000000L, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000c0020L, 0x2000000200003L, 0x6000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x210080040000800L, 0x40000003000L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0xa0200500020604L, 0x24000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000020000500L, 0x10010100000L, 0x800080000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80400040100000L, 0x100400000000000L, 0xb06000160800000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x600000000000000L, 0x2000100L, 0x0L, 0x2L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x4000000L, 0xa0000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x104200000000000L, 0x0L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x4L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x3a0000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2L, 0x0L);
      case 125:
         return jjStopAtPos(0, 222);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active3 & 0x400000L) != 0L)
            return jjStopAtPos(1, 214);
         else if ((active3 & 0x800000L) != 0L)
            return jjStopAtPos(1, 215);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 217);
         break;
      case 62:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 216);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80100400000000L, active1, 0x310180084800820L, active2, 0xa1800000103440L, active3, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 221);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000020a280000c0L, active1, 0x4a0240700160600L, active2, 0x3808181060420100L, active3, 0x4L);
      case 70:
      case 102:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200008L, active2, 0x4000000L, active3, 0x200000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L, active2, 0L, active3, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x120600000000000L, active1, 0x10000L, active2, 0x10000001000010L, active3, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8044004000000000L, active1, 0x80a010000004L, active2, 0x346408180200880L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000800000L, active1, 0x10L, active2, 0x400010008000000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0x800000000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6400001086000000L, active1, 0x8000801001100L, active2, 0x6002000204L, active3, 0x3L);
      case 79:
      case 111:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1010050001000L, active1, 0x104102500000c000L, active2, 0xc000020610054020L, active3, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x2010002000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800048000000000L, active1, 0x400040080002L, active2, 0x40000000000L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000100000200L, active1, 0x8000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
         if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000000L, active1, 0L, active2, 0x80000L, active3, 0x100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2002000000800L, active1, 0x804000000000041L, active2, 0x200000000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x500L, active1, 0L, active2, 0x808000L, active3, 0L);
      case 124:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1010800011000L, active2, 0x18000801000000L, active3, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x100000400000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 40);
         else if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L, active2, 0x80010001000L, active3, 0L);
      case 68:
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 40);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 40);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x2008002L, active2, 0x3000001000020000L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x120680000000000L, active1, 0x80000L, active2, 0x40000000010L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000080L, active1, 0x80040000200000L, active2, 0x4000000L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0x4L, active2, 0x800000000cL, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x600010000000000L, active1, 0x40400140L, active2, 0L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000000000L, active1, 0x4000004144000L, active2, 0x2000100L, active3, 0x20L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001000000000400L, active1, 0x1010000400L, active2, 0x6200060450000L, active3, 0L);
      case 78:
      case 110:
         if ((active3 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 225);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x40004000020080L, active2, 0xc340000100008820L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800048000000000L, active1, 0x20000000000000L, active2, 0x400010608080000L, active3, 0L);
      case 80:
      case 112:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100002200L, active2, 0x800000L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x58000000000840L, active1, 0x2100a0000000800L, active2, 0xa0000000000080L, active3, 0x4L);
      case 83:
      case 115:
         if ((active3 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 224);
         return jjMoveStringLiteralDfa3_0(active0, 0x900600000100L, active1, 0xb0a001000000L, active2, 0x302200L, active3, 0x2L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 40);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 40);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 159, 40);
         else if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000000000L, active1, 0x80a0002a0000039L, active2, 0x1804000000040L, active3, 0x8L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L, active2, 0x20000000000L, active3, 0x1L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x4000L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800400000000400L, active3, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 40);
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000200L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1400000000000000L, active2, 0x4c08L, active3, 0L);
      case 65:
      case 97:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4200a0a0200L, active2, 0x40010010008100L, active3, 0L);
      case 66:
      case 98:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 186, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000L, active2, 0x80020008000000L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x108000000060L, active2, 0x20040000000010L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 40);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 40);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 40);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 40);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 40);
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x6018000000000000L, active1, 0x8802000114001bL, active2, 0x3604000000280L, active3, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0xc000000000000000L, active3, 0L);
      case 72:
      case 104:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 40);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L, active2, 0L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x9000000000000000L, active1, 0x2000020808000L, active2, 0x3000089002000004L, active3, 0xaL);
      case 75:
      case 107:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 149, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 40);
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x105000900000000L, active2, 0xc04000000L, active3, 0x20L);
      case 77:
      case 109:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 40);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 192, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x600L, active1, 0x1040000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 40);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 40);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x400000010000L, active2, 0x20L, active3, 0L);
      case 79:
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000080L, active1, 0x800000000002480L, active2, 0x400000L, active3, 0x4L);
      case 80:
      case 112:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 40);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000L, active2, 0x20050000L, active3, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 179, 40);
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000800L, active1, 0x20000000000000L, active2, 0x1080000L, active3, 0x10L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000040L, active1, 0x40000000600800L, active2, 0x2000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 40);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 148, 40);
         else if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 187, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0x210a90000000000L, active2, 0L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x484004000L, active2, 0x20000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x300000100000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000000L, active2, 0x1000L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x108140000000L, active2, 0x80c0000L, active3, 0x30L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400002000000000L, active2, 0x4100000000000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000100000L, active2, 0x80L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 174, 40);
         break;
      case 69:
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 40);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 40);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0xd00L, active1, 0x101005204200800L, active2, 0x400000020L, active3, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000L, active2, 0x4000L, active3, 0x4L);
      case 71:
      case 103:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 57, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000010000L, active2, 0x4000000000L, active3, 0x2L);
      case 72:
      case 104:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0x2108b0400000200L, active2, 0x80040104000000L, active3, 0L);
      case 75:
      case 107:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 76:
      case 108:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10001000L, active2, 0x20800000000L, active3, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x2000000024000L, active2, 0x80000008000L, active3, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 40);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000L, active2, 0x8002020004L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L, active2, 0x20000000L, active3, 0x8L);
      case 80:
      case 112:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000008000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 40);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 40);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 40);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 40);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0x88200081002080L, active2, 0x40200000410e08L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000001000000L, active3, 0L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 40);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 40);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 40);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 168, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x440000024c0000L, active2, 0x8201000000000000L, active3, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000100L, active2, 0x3000001000000000L, active3, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L, active2, 0L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000L, active3, 0L);
      case 88:
      case 120:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 40);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0x100L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20490080000000L, active2, 0x20080400000000L, active3, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000L, active2, 0x40020L, active3, 0x10L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0x20000L, active3, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 40);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 40);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 40);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 40);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 40);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 40);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 40);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 40);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 40);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 40);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 40);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 40);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 40);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 153, 40);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 169, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active1, 0x84000200000000L, active2, 0x8200004001010000L, active3, 0L);
      case 71:
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x80000L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x802200000000000L, active2, 0x1200800008000L, active3, 0x4L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      case 76:
      case 108:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400042400000000L, active2, 0x4100000000000000L, active3, 0L);
      case 77:
      case 109:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x3000001000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 40);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0x801000000000L, active2, 0x80000104000000L, active3, 0xaL);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L, active2, 0x6c08L, active3, 0L);
      case 82:
      case 114:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 40);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x104000c040000000L, active2, 0x20000000L, active3, 0L);
      case 83:
      case 115:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 40);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x109000000000000L, active2, 0x40000000010L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 40);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 40);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 40);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 5;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 167, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0x210000000000000L, active2, 0x2000000000280L, active3, 0x20L);
      case 89:
      case 121:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 40);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 150, 40);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 182, 40);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0x82000020020000L, active3, 0x8L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 67:
      case 99:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 143, 40);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 173, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1a00000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 40);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 40);
         break;
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 40);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 40);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 101, 40);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 40);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 147, 40);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 154, 40);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 197, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0x1000L, active3, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1210000000000000L, active2, 0x41000000000L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L);
      case 76:
      case 108:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 40);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 40);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 107, 40);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 40);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 40);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 162, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0x8a0000000000000L, active2, 0x800000000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0x4100000000000080L, active3, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 166, 40);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 181, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L, active2, 0x6000L, active3, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 40);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 40);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 40);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 146, 40);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 152, 40);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 160, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0xa00L, active1, 0x400000000000L, active2, 0x2000000000000020L, active3, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xc08L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0x8200000000000000L, active3, 0L);
      case 89:
      case 121:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 40);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L, active2, 0x8L, active3, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 66:
      case 98:
         if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 184, 40);
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 190, 40);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc88000000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 141, 40);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 193, 40);
         break;
      case 69:
      case 101:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 40);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 40);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 40);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 176, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000000100L, active3, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0x60000000000000L, active2, 0x20L, active3, 0L);
      case 76:
      case 108:
         if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 194, 40);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 195, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 77:
      case 109:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 132, 40);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000004200L, active3, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000020000L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1210000000000000L, active2, 0x40000000000L, active3, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0x80000020000080L, active3, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 40);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 138, 16);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 139, 16);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000L, active3, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 40);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 40);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 114, 40);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 163, 40);
         else if ((active2 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 185, 40);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 191, 40);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L, active2, 0x10200L, active3, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x8L, active3, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 170, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x240000000000000L, active2, 0L, active3, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000000000000020L, active3, 0L);
      case 80:
      case 112:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 177, 40);
         break;
      case 82:
      case 114:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 196, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1800000000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 140, 16);
         break;
      case 84:
      case 116:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 115, 40);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 145, 40);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 164, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0L);
      case 89:
      case 121:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 135, 40);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 157, 40);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 183, 40);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100L, active3, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000000L, active2, 0x100L);
      case 66:
      case 98:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 188, 40);
         break;
      case 67:
      case 99:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 9, 40);
         break;
      case 68:
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 144, 40);
         break;
      case 69:
      case 101:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 117, 40);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 120, 40);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L, active1, 0x1200000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 133, 40);
         break;
      case 83:
      case 115:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 119, 40);
         break;
      case 84:
      case 116:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 118, 40);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 142, 16);
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 189, 40);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active1, 0x800000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000000L, active2, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 11, 16);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 121, 40);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 89:
      case 121:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 124, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 137, 16);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active1, 0x800000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x8L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa13_0(active1, 0x400000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 122, 16);
         break;
      case 72:
      case 104:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(13, 131, 16);
         break;
      case 84:
      case 116:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 123, 16);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(14, 136, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 40:
               case 16:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  jjCheckNAdd(16);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 199)
                        kind = 199;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar != 45)
                     break;
                  if (kind > 201)
                     kind = 201;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 201)
                     kind = 201;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 42)
                     jjCheckNAddStates(12, 14);
                  break;
               case 11:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if (curChar == 47 && kind > 202)
                     kind = 202;
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 17:
               case 21:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 19:
                  if (curChar == 39 && kind > 206)
                     kind = 206;
                  break;
               case 23:
               case 27:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 24:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 25:
                  if (curChar == 34 && kind > 206)
                     kind = 206;
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 199)
                     kind = 199;
                  jjCheckNAddStates(0, 5);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 0);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAdd(36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 199)
                     kind = 199;
                  jjCheckNAdd(39);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 203)
                        kind = 203;
                     jjCheckNAdd(16);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 203)
                        kind = 203;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 203)
                        kind = 203;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 6:
                  if (kind > 201)
                     kind = 201;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  jjCheckNAddTwoStates(12, 10);
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 203)
                     kind = 203;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  jjCheckNAddStates(9, 11);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(22, 23);
                  break;
               case 22:
                  if (curChar == 92)
                     jjCheckNAddStates(9, 11);
                  break;
               case 24:
                  jjCheckNAddStates(6, 8);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(24, 25);
                  break;
               case 28:
                  if (curChar == 92)
                     jjCheckNAddStates(6, 8);
                  break;
               case 29:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 96 && kind > 207)
                     kind = 207;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 201)
                     kind = 201;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 18:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 0, 34, 35, 36, 39, 24, 25, 26, 18, 19, 20, 10, 11, 13, 30, 
   31, 34, 35, 36, 3, 4, 21, 22, 27, 28, 37, 38, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\50", "\51", "\54", "\75", "\174\174", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\73", "\56", "\52", "\77", "\76", "\74", "\76\75", "\74\75", "\74\76", 
"\41\75", "\53", "\55", "\57", null, "\175", null, null, null, "\72", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7ffffc8ffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0x600L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x600L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[40];
private final int[] jjstateSet = new int[80];
protected char curChar;
/** Constructor. */
public CCJSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CCJSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
