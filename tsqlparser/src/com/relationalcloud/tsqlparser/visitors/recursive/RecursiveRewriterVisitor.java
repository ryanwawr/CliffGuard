package com.relationalcloud.tsqlparser.visitors.recursive;

import com.relationalcloud.tsqlparser.expression.AllComparisonExpression;
import com.relationalcloud.tsqlparser.expression.AnyComparisonExpression;
import com.relationalcloud.tsqlparser.expression.CaseExpression;
import com.relationalcloud.tsqlparser.expression.DateValue;
import com.relationalcloud.tsqlparser.expression.DoubleValue;
import com.relationalcloud.tsqlparser.expression.Function;
import com.relationalcloud.tsqlparser.expression.InverseExpression;
import com.relationalcloud.tsqlparser.expression.JdbcParameter;
import com.relationalcloud.tsqlparser.expression.LongValue;
import com.relationalcloud.tsqlparser.expression.NullValue;
import com.relationalcloud.tsqlparser.expression.Parenthesis;
import com.relationalcloud.tsqlparser.expression.StringValue;
import com.relationalcloud.tsqlparser.expression.TimeValue;
import com.relationalcloud.tsqlparser.expression.TimestampValue;
import com.relationalcloud.tsqlparser.expression.UnaryValue;
import com.relationalcloud.tsqlparser.expression.WhenClause;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Addition;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Division;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Multiplication;
import com.relationalcloud.tsqlparser.expression.operators.arithmetic.Subtraction;
import com.relationalcloud.tsqlparser.expression.operators.conditional.AndExpression;
import com.relationalcloud.tsqlparser.expression.operators.conditional.OrExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.Between;
import com.relationalcloud.tsqlparser.expression.operators.relational.Concatenation;
import com.relationalcloud.tsqlparser.expression.operators.relational.EqualsTo;
import com.relationalcloud.tsqlparser.expression.operators.relational.ExistsExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.ExpressionList;
import com.relationalcloud.tsqlparser.expression.operators.relational.GreaterThan;
import com.relationalcloud.tsqlparser.expression.operators.relational.GreaterThanEquals;
import com.relationalcloud.tsqlparser.expression.operators.relational.InExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.IsNullExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.ItemsList;
import com.relationalcloud.tsqlparser.expression.operators.relational.LikeExpression;
import com.relationalcloud.tsqlparser.expression.operators.relational.MinorThan;
import com.relationalcloud.tsqlparser.expression.operators.relational.MinorThanEquals;
import com.relationalcloud.tsqlparser.expression.operators.relational.NotEqualsTo;
import com.relationalcloud.tsqlparser.schema.Column;
import com.relationalcloud.tsqlparser.schema.Table;
import com.relationalcloud.tsqlparser.statement.Statement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableAddColumnStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableAddConstraintStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableAlterColumnStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableChangeColumnStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableDropColumnStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableDropConstraintStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableModifyColumnStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableOrderByStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableRenameTableStatement;
import com.relationalcloud.tsqlparser.statement.alter.table.AlterTableStatement;
import com.relationalcloud.tsqlparser.statement.create.index.CreateIndex;
import com.relationalcloud.tsqlparser.statement.create.table.ColDataType;
import com.relationalcloud.tsqlparser.statement.create.table.ColumnDefinition;
import com.relationalcloud.tsqlparser.statement.create.table.CreateTable;
import com.relationalcloud.tsqlparser.statement.delete.Delete;
import com.relationalcloud.tsqlparser.statement.drop.Drop;
import com.relationalcloud.tsqlparser.statement.drop.DropIndex;
import com.relationalcloud.tsqlparser.statement.drop.DropTable;
import com.relationalcloud.tsqlparser.statement.insert.Insert;
import com.relationalcloud.tsqlparser.statement.rename.RenameTable;
import com.relationalcloud.tsqlparser.statement.replace.Replace;
import com.relationalcloud.tsqlparser.statement.select.AllColumns;
import com.relationalcloud.tsqlparser.statement.select.AllTableColumns;
import com.relationalcloud.tsqlparser.statement.select.ColumnIndex;
import com.relationalcloud.tsqlparser.statement.select.Distinct;
import com.relationalcloud.tsqlparser.statement.select.FromItem;
import com.relationalcloud.tsqlparser.statement.select.Join;
import com.relationalcloud.tsqlparser.statement.select.Limit;
import com.relationalcloud.tsqlparser.statement.select.OrderByElement;
import com.relationalcloud.tsqlparser.statement.select.PlainSelect;
import com.relationalcloud.tsqlparser.statement.select.Select;
import com.relationalcloud.tsqlparser.statement.select.SelectExpressionItem;
import com.relationalcloud.tsqlparser.statement.select.SelectItem;
import com.relationalcloud.tsqlparser.statement.select.SubJoin;
import com.relationalcloud.tsqlparser.statement.select.SubSelect;
import com.relationalcloud.tsqlparser.statement.select.Top;
import com.relationalcloud.tsqlparser.statement.select.Union;
import com.relationalcloud.tsqlparser.statement.select.WithItem;
import com.relationalcloud.tsqlparser.statement.truncate.Truncate;
import com.relationalcloud.tsqlparser.statement.update.Update;

public interface RecursiveRewriterVisitor {
	// Statements
	
	public void visitBegin(AlterTableAddColumnStatement n);
	public void visitBegin(AlterTableAddConstraintStatement n);
	public void visitBegin(AlterTableAlterColumnStatement n);
	public void visitBegin(AlterTableChangeColumnStatement n);
	public void visitBegin(AlterTableDropColumnStatement n);
	public void visitBegin(AlterTableDropConstraintStatement n);
	public void visitBegin(AlterTableModifyColumnStatement n);
	public void visitBegin(AlterTableOrderByStatement n);
	public void visitBegin(AlterTableRenameTableStatement n);
	public void visitBegin(AlterTableStatement n);
	public void visitBegin(CreateIndex n);
	public void visitBegin(ColDataType n);
	public void visitBegin(ColumnDefinition n);
	public void visitBegin(CreateTable n);
	public void visitBegin(Delete n);
	public void visitBegin(Drop n);
	public void visitBegin(DropIndex n);
	public void visitBegin(DropTable n);
	public void visitBegin(Insert n);
	public void visitBegin(RenameTable n);
	public void visitBegin(Replace n);
	public void visitBegin(AllColumns n);
	public void visitBegin(AllTableColumns n);
	public void visitBegin(ColumnIndex n);
	public void visitBegin(Distinct n);
	public void visitBegin(FromItem n);
	public void visitBegin(Join n);
	public void visitBegin(Limit n);
	public void visitBegin(OrderByElement n);
	public void visitBegin(PlainSelect n);
	public void visitBegin(Select n);
	public void visitBegin(SelectExpressionItem n);
	public void visitBegin(SelectItem n);
	public void visitBegin(SubJoin n);
	public void visitBegin(SubSelect n);
	public void visitBegin(Top n);
	public void visitBegin(Union n);
	public void visitBegin(WithItem n);
	public void visitBegin(Statement n);
	public void visitBegin(Truncate n);
	public void visitBegin(Update n);

	public Object visitEnd(AlterTableAddColumnStatement n);
	public Object visitEnd(AlterTableAddConstraintStatement n);
	public Object visitEnd(AlterTableAlterColumnStatement n);
	public Object visitEnd(AlterTableChangeColumnStatement n);
	public Object visitEnd(AlterTableDropColumnStatement n);
	public Object visitEnd(AlterTableDropConstraintStatement n);
	public Object visitEnd(AlterTableModifyColumnStatement n);
	public Object visitEnd(AlterTableOrderByStatement n);
	public Object visitEnd(AlterTableRenameTableStatement n);
	public Object visitEnd(AlterTableStatement n);
	public Object visitEnd(CreateIndex n);
	public Object visitEnd(ColDataType n);
	public Object visitEnd(ColumnDefinition n);
	public Object visitEnd(CreateTable n);
	public Object visitEnd(Delete n);
	public Object visitEnd(Drop n);
	public Object visitEnd(DropIndex n);
	public Object visitEnd(DropTable n);
	public Object visitEnd(Insert n);
	public Object visitEnd(RenameTable n);
	public Object visitEnd(Replace n);
	public Object visitEnd(AllColumns n);
	public Object visitEnd(AllTableColumns n);
	public Object visitEnd(ColumnIndex n);
	public Object visitEnd(Distinct n);
	public Object visitEnd(FromItem n);
	public Object visitEnd(Join n);
	public Object visitEnd(Limit n);
	public Object visitEnd(OrderByElement n);
	public Object visitEnd(PlainSelect n);
	public Object visitEnd(Select n);
	public Object visitEnd(SelectExpressionItem n);
	public Object visitEnd(SelectItem n);
	public Object visitEnd(SubJoin n);
	public Object visitEnd(SubSelect n);
	public Object visitEnd(Top n);
	public Object visitEnd(Union n);
	public Object visitEnd(WithItem n);
	public Object visitEnd(Statement n);
	public Object visitEnd(Truncate n);
	public Object visitEnd(Update n);
	
	// Expressions
	
	public void visitBegin(AllComparisonExpression n);
	public void visitBegin(AnyComparisonExpression n);
	public void visitBegin(CaseExpression n);
	public void visitBegin(DateValue n);
	public void visitBegin(DoubleValue n);
	public void visitBegin(Function n);
	public void visitBegin(InverseExpression n);
	public void visitBegin(JdbcParameter n);
	public void visitBegin(LongValue n);
	public void visitBegin(NullValue n);
	public void visitBegin(Addition n);
	public void visitBegin(Division n);
	public void visitBegin(Multiplication n);
	public void visitBegin(Subtraction n);
	public void visitBegin(AndExpression n);
	public void visitBegin(OrExpression n);
	public void visitBegin(Between n);
	public void visitBegin(EqualsTo n);
	public void visitBegin(ExistsExpression n);
	public void visitBegin(ExpressionList n);
	public void visitBegin(GreaterThan n);
	public void visitBegin(GreaterThanEquals n);
	public void visitBegin(InExpression n);
	public void visitBegin(IsNullExpression n);
	public void visitBegin(ItemsList n);
	public void visitBegin(LikeExpression n);
	public void visitBegin(Concatenation n);
	public void visitBegin(MinorThan n);
	public void visitBegin(MinorThanEquals n);
	public void visitBegin(NotEqualsTo n);
	public void visitBegin(Parenthesis n);
	public void visitBegin(StringValue n);
	public void visitBegin(TimestampValue n);
	public void visitBegin(TimeValue n);
	public void visitBegin(UnaryValue n);
	public void visitBegin(WhenClause n);

	public Object visitEnd(AllComparisonExpression n);
	public Object visitEnd(AnyComparisonExpression n);
	public Object visitEnd(CaseExpression n);
	public Object visitEnd(DateValue n);
	public Object visitEnd(DoubleValue n);
	public Object visitEnd(Function n);
	public Object visitEnd(InverseExpression n);
	public Object visitEnd(JdbcParameter n);
	public Object visitEnd(LongValue n);
	public Object visitEnd(NullValue n);
	public Object visitEnd(Addition n);
	public Object visitEnd(Division n);
	public Object visitEnd(Multiplication n);
	public Object visitEnd(Subtraction n);
	public Object visitEnd(AndExpression n);
	public Object visitEnd(OrExpression n);
	public Object visitEnd(Between n);
	public Object visitEnd(EqualsTo n);
	public Object visitEnd(ExistsExpression n);
	public Object visitEnd(ExpressionList n);
	public Object visitEnd(GreaterThan n);
	public Object visitEnd(GreaterThanEquals n);
	public Object visitEnd(InExpression n);
	public Object visitEnd(IsNullExpression n);
	public Object visitEnd(ItemsList n);
	public Object visitEnd(LikeExpression n);
	public Object visitEnd(Concatenation n);
	public Object visitEnd(MinorThan n);
	public Object visitEnd(MinorThanEquals n);
	public Object visitEnd(NotEqualsTo n);
	public Object visitEnd(Parenthesis n);
	public Object visitEnd(StringValue n);
	public Object visitEnd(TimestampValue n);
	public Object visitEnd(TimeValue n);
	public Object visitEnd(UnaryValue n);
	public Object visitEnd(WhenClause n);
	
	// Schemas
	public void visitBegin(Column n);
	public void visitBegin(Table n);

	public Object visitEnd(Column n);
	public Object visitEnd(Table n);
	
	// Contexts
	public void pushASTContext(ASTContext c);
	public void popASTContext();
}
